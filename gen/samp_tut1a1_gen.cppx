//
// cpp/gen/samp_tut1a_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/samp_tut1a_gen.h"
#include "include/gen/samp_tut1a_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
algo_lib::FDb     algo_lib::_db;      // dependency found via dev.targdep
lib_json::FDb     lib_json::_db;      // dependency found via dev.targdep
samp_tut1a::FDb   samp_tut1a::_db;    // dependency found via dev.targdep

namespace samp_tut1a {
const char *samp_tut1a_help =
"Usage: samp_tut1a [options]\n"
"    OPTION      TYPE    DFLT    COMMENT\n"
"    -in         string  \"data\"  Input directory or filename, - for stdin\n"
"    -verbose    int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int             Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help and exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace samp_tut1a
namespace samp_tut1a { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    // func:samp_tut1a.FDb._db.InitReflection
    static void          InitReflection();
    // find trace by row id (used to implement reflection)
    // func:samp_tut1a.FDb.trace.RowidFind
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    // func:samp_tut1a.FDb.trace.N
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    // func:samp_tut1a...SizeCheck
    static void          SizeCheck();
} // gen:ns_print_proto

// --- samp_tut1a.trace..Print
// print string representation of ROW to string STR
// cfmt:samp_tut1a.trace.String  printfmt:Tuple
void samp_tut1a::trace_Print(samp_tut1a::trace& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "samp_tut1a.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- samp_tut1a.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     samp_tut1a.FDb.cmdline
//     algo_lib.FDb.cmdline
void samp_tut1a::ReadArgv() {
    command::samp_tut1a &cmd = samp_tut1a::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::samp_tut1a_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"samp_tut1a: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "samp_tut1a: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::samp_tut1a_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"samp_tut1a: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    // dmmeta.floadtuples:samp_tut1a.FDb.cmdline
    if (!dohelp && err=="") {
        algo_lib::ResetErrtext();
        if (!samp_tut1a::LoadTuplesMaybe(cmd.in,true)) {
            err << "samp_tut1a.load_input  "<<algo_lib::DetachBadTags()<<eol;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(samp_tut1a_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
}

// --- samp_tut1a.FDb._db.MainLoop
// Main loop.
void samp_tut1a::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        samp_tut1a::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- samp_tut1a.FDb._db.Step
// Main step
void samp_tut1a::Step() {
}

// --- samp_tut1a.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void samp_tut1a::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("samp_tut1a", NULL, NULL, samp_tut1a::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "samp_tut1a.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(samp_tut1a::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)samp_tut1a::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
}

// --- samp_tut1a.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool samp_tut1a::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    (void)str;//only to avoid -Wunused-parameter
    return retval;
}

// --- samp_tut1a.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool samp_tut1a::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = samp_tut1a::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = samp_tut1a::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && samp_tut1a::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- samp_tut1a.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool samp_tut1a::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    // missing files are not an error
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- samp_tut1a.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool samp_tut1a::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- samp_tut1a.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool samp_tut1a::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = samp_tut1a::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- samp_tut1a.FDb._db.Steps
// Calls Step function of dependencies
void samp_tut1a::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- samp_tut1a.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool samp_tut1a::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- samp_tut1a.FDb.proj.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
samp_tut1a::Proj& samp_tut1a::proj_Alloc() {
    samp_tut1a::Proj* row = proj_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("samp_tut1a.out_of_mem  field:samp_tut1a.FDb.proj  comment:'Alloc failed'");
    }
    return *row;
}

// --- samp_tut1a.FDb.proj.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
samp_tut1a::Proj* samp_tut1a::proj_AllocMaybe() {
    samp_tut1a::Proj *row = (samp_tut1a::Proj*)proj_AllocMem();
    if (row) {
        new (row) samp_tut1a::Proj; // call constructor
    }
    return row;
}

// --- samp_tut1a.FDb.proj.Delete
// Remove row from all global and cross indices, then deallocate row
void samp_tut1a::proj_Delete(samp_tut1a::Proj &row) {
    row.~Proj();
    proj_FreeMem(row);
}

// --- samp_tut1a.FDb.proj.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* samp_tut1a::proj_AllocMem() {
    samp_tut1a::Proj *row = _db.proj_free;
    if (UNLIKELY(!row)) {
        proj_Reserve(1);
        row = _db.proj_free;
    }
    if (row) {
        _db.proj_free = row->proj_next;
    }
    return row;
}

// --- samp_tut1a.FDb.proj.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void samp_tut1a::proj_FreeMem(samp_tut1a::Proj &row) {
    if (UNLIKELY(row.proj_next != (samp_tut1a::Proj*)-1)) {
        FatalErrorExit("samp_tut1a.tpool_double_delete  pool:samp_tut1a.FDb.proj  comment:'double deletion caught'");
    }
    row.proj_next = _db.proj_free; // insert into free list
    _db.proj_free  = &row;
}

// --- samp_tut1a.FDb.proj.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 samp_tut1a::proj_Reserve(u64 n_elems) {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.proj_blocksize; // underlying allocator is probably Lpool
        u64 reserved = proj_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- samp_tut1a.FDb.proj.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 samp_tut1a::proj_ReserveMem(u64 size) {
    u64 ret = 0;
    if (size >= sizeof(samp_tut1a::Proj)) {
        samp_tut1a::Proj *mem = (samp_tut1a::Proj*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(samp_tut1a::Proj) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].proj_next = _db.proj_free;
            _db.proj_free = mem+i;
        }
    }
    return ret;
}

// --- samp_tut1a.FDb.proj.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool samp_tut1a::proj_XrefMaybe(samp_tut1a::Proj &row) {
    bool retval = true;
    (void)row;
    // insert proj into index ind_proj
    if (true) { // user-defined insert condition
        bool success = ind_proj_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "samp_tut1a.duplicate_key  xref:samp_tut1a.FDb.ind_proj"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- samp_tut1a.FDb.ind_proj.Find
// Find row by key. Return NULL if not found.
samp_tut1a::Proj* samp_tut1a::ind_proj_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_proj_buckets_n - 1);
    samp_tut1a::Proj* *e = &_db.ind_proj_buckets_elems[index];
    samp_tut1a::Proj* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).proj == key;
        if (done) break;
        e         = &ret->ind_proj_next;
    } while (true);
    return ret;
}

// --- samp_tut1a.FDb.ind_proj.FindX
// Look up row by key and return reference. Throw exception if not found
samp_tut1a::Proj& samp_tut1a::ind_proj_FindX(const algo::strptr& key) {
    samp_tut1a::Proj* ret = ind_proj_Find(key);
    vrfy(ret, tempstr() << "samp_tut1a.key_error  table:ind_proj  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- samp_tut1a.FDb.ind_proj.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
samp_tut1a::Proj& samp_tut1a::ind_proj_GetOrCreate(const algo::strptr& key) {
    samp_tut1a::Proj* ret = ind_proj_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &proj_Alloc();
        (*ret).proj = key;
        bool good = proj_XrefMaybe(*ret);
        if (!good) {
            proj_Delete(*ret); // delete offending row, any existin xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "samp_tut1a.create_error  table:ind_proj  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- samp_tut1a.FDb.ind_proj.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool samp_tut1a::ind_proj_InsertMaybe(samp_tut1a::Proj& row) {
    ind_proj_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_proj_next == (samp_tut1a::Proj*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.proj) & (_db.ind_proj_buckets_n - 1);
        samp_tut1a::Proj* *prev = &_db.ind_proj_buckets_elems[index];
        do {
            samp_tut1a::Proj* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).proj == row.proj) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_proj_next;
        } while (true);
        if (retval) {
            row.ind_proj_next = *prev;
            _db.ind_proj_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- samp_tut1a.FDb.ind_proj.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void samp_tut1a::ind_proj_Remove(samp_tut1a::Proj& row) {
    if (LIKELY(row.ind_proj_next != (samp_tut1a::Proj*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.proj) & (_db.ind_proj_buckets_n - 1);
        samp_tut1a::Proj* *prev = &_db.ind_proj_buckets_elems[index]; // addr of pointer to current element
        while (samp_tut1a::Proj *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_proj_next; // unlink (singly linked list)
                _db.ind_proj_n--;
                row.ind_proj_next = (samp_tut1a::Proj*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_proj_next;
        }
    }
}

// --- samp_tut1a.FDb.ind_proj.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void samp_tut1a::ind_proj_Reserve(int n) {
    u32 old_nbuckets = _db.ind_proj_buckets_n;
    u32 new_nelems   = _db.ind_proj_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(samp_tut1a::Proj*);
        u32 new_size = new_nbuckets * sizeof(samp_tut1a::Proj*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        samp_tut1a::Proj* *new_buckets = (samp_tut1a::Proj**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("samp_tut1a.out_of_memory  field:samp_tut1a.FDb.ind_proj");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_proj_buckets_n; i++) {
            samp_tut1a::Proj* elem = _db.ind_proj_buckets_elems[i];
            while (elem) {
                samp_tut1a::Proj &row        = *elem;
                samp_tut1a::Proj* next       = row.ind_proj_next;
                u32 index          = algo::Smallstr50_Hash(0, row.proj) & (new_nbuckets-1);
                row.ind_proj_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_proj_buckets_elems, old_size);
        _db.ind_proj_buckets_elems = new_buckets;
        _db.ind_proj_buckets_n = new_nbuckets;
    }
}

// --- samp_tut1a.FDb.part.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
samp_tut1a::Part& samp_tut1a::part_Alloc() {
    samp_tut1a::Part* row = part_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("samp_tut1a.out_of_mem  field:samp_tut1a.FDb.part  comment:'Alloc failed'");
    }
    return *row;
}

// --- samp_tut1a.FDb.part.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
samp_tut1a::Part* samp_tut1a::part_AllocMaybe() {
    samp_tut1a::Part *row = (samp_tut1a::Part*)part_AllocMem();
    if (row) {
        new (row) samp_tut1a::Part; // call constructor
    }
    return row;
}

// --- samp_tut1a.FDb.part.Delete
// Remove row from all global and cross indices, then deallocate row
void samp_tut1a::part_Delete(samp_tut1a::Part &row) {
    row.~Part();
    part_FreeMem(row);
}

// --- samp_tut1a.FDb.part.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* samp_tut1a::part_AllocMem() {
    samp_tut1a::Part *row = _db.part_free;
    if (UNLIKELY(!row)) {
        part_Reserve(1);
        row = _db.part_free;
    }
    if (row) {
        _db.part_free = row->part_next;
    }
    return row;
}

// --- samp_tut1a.FDb.part.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void samp_tut1a::part_FreeMem(samp_tut1a::Part &row) {
    if (UNLIKELY(row.part_next != (samp_tut1a::Part*)-1)) {
        FatalErrorExit("samp_tut1a.tpool_double_delete  pool:samp_tut1a.FDb.part  comment:'double deletion caught'");
    }
    row.part_next = _db.part_free; // insert into free list
    _db.part_free  = &row;
}

// --- samp_tut1a.FDb.part.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 samp_tut1a::part_Reserve(u64 n_elems) {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.part_blocksize; // underlying allocator is probably Lpool
        u64 reserved = part_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- samp_tut1a.FDb.part.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 samp_tut1a::part_ReserveMem(u64 size) {
    u64 ret = 0;
    if (size >= sizeof(samp_tut1a::Part)) {
        samp_tut1a::Part *mem = (samp_tut1a::Part*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(samp_tut1a::Part) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].part_next = _db.part_free;
            _db.part_free = mem+i;
        }
    }
    return ret;
}

// --- samp_tut1a.FDb.part.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool samp_tut1a::part_XrefMaybe(samp_tut1a::Part &row) {
    bool retval = true;
    (void)row;
    // insert part into index ind_part
    if (true) { // user-defined insert condition
        bool success = ind_part_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "samp_tut1a.duplicate_key  xref:samp_tut1a.FDb.ind_part"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- samp_tut1a.FDb.ind_part.Find
// Find row by key. Return NULL if not found.
samp_tut1a::Part* samp_tut1a::ind_part_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_part_buckets_n - 1);
    samp_tut1a::Part* *e = &_db.ind_part_buckets_elems[index];
    samp_tut1a::Part* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).part == key;
        if (done) break;
        e         = &ret->ind_part_next;
    } while (true);
    return ret;
}

// --- samp_tut1a.FDb.ind_part.FindX
// Look up row by key and return reference. Throw exception if not found
samp_tut1a::Part& samp_tut1a::ind_part_FindX(const algo::strptr& key) {
    samp_tut1a::Part* ret = ind_part_Find(key);
    vrfy(ret, tempstr() << "samp_tut1a.key_error  table:ind_part  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- samp_tut1a.FDb.ind_part.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
samp_tut1a::Part& samp_tut1a::ind_part_GetOrCreate(const algo::strptr& key) {
    samp_tut1a::Part* ret = ind_part_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &part_Alloc();
        (*ret).part = key;
        bool good = part_XrefMaybe(*ret);
        if (!good) {
            part_Delete(*ret); // delete offending row, any existin xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "samp_tut1a.create_error  table:ind_part  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- samp_tut1a.FDb.ind_part.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool samp_tut1a::ind_part_InsertMaybe(samp_tut1a::Part& row) {
    ind_part_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_part_next == (samp_tut1a::Part*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.part) & (_db.ind_part_buckets_n - 1);
        samp_tut1a::Part* *prev = &_db.ind_part_buckets_elems[index];
        do {
            samp_tut1a::Part* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).part == row.part) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_part_next;
        } while (true);
        if (retval) {
            row.ind_part_next = *prev;
            _db.ind_part_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- samp_tut1a.FDb.ind_part.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void samp_tut1a::ind_part_Remove(samp_tut1a::Part& row) {
    if (LIKELY(row.ind_part_next != (samp_tut1a::Part*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.part) & (_db.ind_part_buckets_n - 1);
        samp_tut1a::Part* *prev = &_db.ind_part_buckets_elems[index]; // addr of pointer to current element
        while (samp_tut1a::Part *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_part_next; // unlink (singly linked list)
                _db.ind_part_n--;
                row.ind_part_next = (samp_tut1a::Part*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_part_next;
        }
    }
}

// --- samp_tut1a.FDb.ind_part.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void samp_tut1a::ind_part_Reserve(int n) {
    u32 old_nbuckets = _db.ind_part_buckets_n;
    u32 new_nelems   = _db.ind_part_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(samp_tut1a::Part*);
        u32 new_size = new_nbuckets * sizeof(samp_tut1a::Part*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        samp_tut1a::Part* *new_buckets = (samp_tut1a::Part**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("samp_tut1a.out_of_memory  field:samp_tut1a.FDb.ind_part");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_part_buckets_n; i++) {
            samp_tut1a::Part* elem = _db.ind_part_buckets_elems[i];
            while (elem) {
                samp_tut1a::Part &row        = *elem;
                samp_tut1a::Part* next       = row.ind_part_next;
                u32 index          = algo::Smallstr50_Hash(0, row.part) & (new_nbuckets-1);
                row.ind_part_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_part_buckets_elems, old_size);
        _db.ind_part_buckets_elems = new_buckets;
        _db.ind_part_buckets_n = new_nbuckets;
    }
}

// --- samp_tut1a.FDb.partproj.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
samp_tut1a::Partproj& samp_tut1a::partproj_Alloc() {
    samp_tut1a::Partproj* row = partproj_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("samp_tut1a.out_of_mem  field:samp_tut1a.FDb.partproj  comment:'Alloc failed'");
    }
    return *row;
}

// --- samp_tut1a.FDb.partproj.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
samp_tut1a::Partproj* samp_tut1a::partproj_AllocMaybe() {
    samp_tut1a::Partproj *row = (samp_tut1a::Partproj*)partproj_AllocMem();
    if (row) {
        new (row) samp_tut1a::Partproj; // call constructor
    }
    return row;
}

// --- samp_tut1a.FDb.partproj.Delete
// Remove row from all global and cross indices, then deallocate row
void samp_tut1a::partproj_Delete(samp_tut1a::Partproj &row) {
    row.~Partproj();
    partproj_FreeMem(row);
}

// --- samp_tut1a.FDb.partproj.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* samp_tut1a::partproj_AllocMem() {
    samp_tut1a::Partproj *row = _db.partproj_free;
    if (UNLIKELY(!row)) {
        partproj_Reserve(1);
        row = _db.partproj_free;
    }
    if (row) {
        _db.partproj_free = row->partproj_next;
    }
    return row;
}

// --- samp_tut1a.FDb.partproj.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void samp_tut1a::partproj_FreeMem(samp_tut1a::Partproj &row) {
    if (UNLIKELY(row.partproj_next != (samp_tut1a::Partproj*)-1)) {
        FatalErrorExit("samp_tut1a.tpool_double_delete  pool:samp_tut1a.FDb.partproj  comment:'double deletion caught'");
    }
    row.partproj_next = _db.partproj_free; // insert into free list
    _db.partproj_free  = &row;
}

// --- samp_tut1a.FDb.partproj.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 samp_tut1a::partproj_Reserve(u64 n_elems) {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.partproj_blocksize; // underlying allocator is probably Lpool
        u64 reserved = partproj_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- samp_tut1a.FDb.partproj.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 samp_tut1a::partproj_ReserveMem(u64 size) {
    u64 ret = 0;
    if (size >= sizeof(samp_tut1a::Partproj)) {
        samp_tut1a::Partproj *mem = (samp_tut1a::Partproj*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(samp_tut1a::Partproj) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].partproj_next = _db.partproj_free;
            _db.partproj_free = mem+i;
        }
    }
    return ret;
}

// --- samp_tut1a.FDb.partproj.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool samp_tut1a::partproj_XrefMaybe(samp_tut1a::Partproj &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- samp_tut1a.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr samp_tut1a::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- samp_tut1a.FDb.trace.N
// Function return 1
inline static i32 samp_tut1a::trace_N() {
    return 1;
}

// --- samp_tut1a.FDb..Init
// Set all fields to initial values.
void samp_tut1a::FDb_Init() {
    // proj: initialize Tpool
    _db.proj_free      = NULL;
    _db.proj_blocksize = algo::BumpToPow2(64 * sizeof(samp_tut1a::Proj)); // allocate 64-127 elements at a time
    // initialize hash table for samp_tut1a::Proj;
    _db.ind_proj_n             	= 0; // (samp_tut1a.FDb.ind_proj)
    _db.ind_proj_buckets_n     	= 4; // (samp_tut1a.FDb.ind_proj)
    _db.ind_proj_buckets_elems 	= (samp_tut1a::Proj**)algo_lib::malloc_AllocMem(sizeof(samp_tut1a::Proj*)*_db.ind_proj_buckets_n); // initial buckets (samp_tut1a.FDb.ind_proj)
    if (!_db.ind_proj_buckets_elems) {
        FatalErrorExit("out of memory"); // (samp_tut1a.FDb.ind_proj)
    }
    memset(_db.ind_proj_buckets_elems, 0, sizeof(samp_tut1a::Proj*)*_db.ind_proj_buckets_n); // (samp_tut1a.FDb.ind_proj)
    // part: initialize Tpool
    _db.part_free      = NULL;
    _db.part_blocksize = algo::BumpToPow2(64 * sizeof(samp_tut1a::Part)); // allocate 64-127 elements at a time
    // initialize hash table for samp_tut1a::Part;
    _db.ind_part_n             	= 0; // (samp_tut1a.FDb.ind_part)
    _db.ind_part_buckets_n     	= 4; // (samp_tut1a.FDb.ind_part)
    _db.ind_part_buckets_elems 	= (samp_tut1a::Part**)algo_lib::malloc_AllocMem(sizeof(samp_tut1a::Part*)*_db.ind_part_buckets_n); // initial buckets (samp_tut1a.FDb.ind_part)
    if (!_db.ind_part_buckets_elems) {
        FatalErrorExit("out of memory"); // (samp_tut1a.FDb.ind_part)
    }
    memset(_db.ind_part_buckets_elems, 0, sizeof(samp_tut1a::Part*)*_db.ind_part_buckets_n); // (samp_tut1a.FDb.ind_part)
    // partproj: initialize Tpool
    _db.partproj_free      = NULL;
    _db.partproj_blocksize = algo::BumpToPow2(64 * sizeof(samp_tut1a::Partproj)); // allocate 64-127 elements at a time

    samp_tut1a::InitReflection();
}

// --- samp_tut1a.FDb..Uninit
void samp_tut1a::FDb_Uninit() {
    samp_tut1a::FDb &row = _db; (void)row;

    // samp_tut1a.FDb.ind_part.Uninit (Thash)  //
    // skip destruction of ind_part in global scope

    // samp_tut1a.FDb.ind_proj.Uninit (Thash)  //
    // skip destruction of ind_proj in global scope
}

// --- samp_tut1a.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* samp_tut1a::value_ToCstr(const samp_tut1a::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case samp_tut1a_FieldId_value      : ret = "value";  break;
    }
    return ret;
}

// --- samp_tut1a.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void samp_tut1a::value_Print(const samp_tut1a::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- samp_tut1a.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool samp_tut1a::value_SetStrptrMaybe(samp_tut1a::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,samp_tut1a_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- samp_tut1a.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void samp_tut1a::value_SetStrptr(samp_tut1a::FieldId& parent, algo::strptr rhs, samp_tut1a_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- samp_tut1a.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool samp_tut1a::value_ReadStrptrMaybe(samp_tut1a::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- samp_tut1a.FieldId..ReadStrptrMaybe
// Read fields of samp_tut1a::FieldId from an ascii string.
// The format of the string is the format of the samp_tut1a::FieldId's only field
bool samp_tut1a::FieldId_ReadStrptrMaybe(samp_tut1a::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- samp_tut1a.FieldId..Print
// print string representation of ROW to string STR
// cfmt:samp_tut1a.FieldId.String  printfmt:Raw
void samp_tut1a::FieldId_Print(samp_tut1a::FieldId& row, algo::cstring& str) {
    samp_tut1a::value_Print(row, str);
}

// --- samp_tut1a.Part..Uninit
void samp_tut1a::Part_Uninit(samp_tut1a::Part& part) {
    samp_tut1a::Part &row = part; (void)row;
    ind_part_Remove(row); // remove part from index ind_part
}

// --- samp_tut1a.Proj..Uninit
void samp_tut1a::Proj_Uninit(samp_tut1a::Proj& proj) {
    samp_tut1a::Proj &row = proj; (void)row;
    ind_proj_Remove(row); // remove proj from index ind_proj
}

// --- samp_tut1a...SizeCheck
inline static void samp_tut1a::SizeCheck() {
}

// --- samp_tut1a...StaticCheck
void samp_tut1a::StaticCheck() {
    algo_assert(_offset_of(samp_tut1a::FieldId, value) + sizeof(((samp_tut1a::FieldId*)0)->value) == sizeof(samp_tut1a::FieldId));
}

// --- samp_tut1a...main
int main(int argc, char **argv) {
    try {
        algo_lib::FDb_Init();
        lib_json::FDb_Init();
        samp_tut1a::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        samp_tut1a::ReadArgv(); // dmmeta.main:samp_tut1a
        samp_tut1a::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("samp_tut1a.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        samp_tut1a::FDb_Uninit();
        lib_json::FDb_Uninit();
        algo_lib::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- samp_tut1a...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
