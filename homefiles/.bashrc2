#!/bin/bash

# PATH=.:bin:$HOME/arnd/bin:$HOME/av_openacr:$PATH
PATH=bin:$HOME/arnd/bin:$HOME/av_openacr:$PATH

# the rest for interactive shell only
tmp_code=$(find "$HOME/.vscode-server/cli/servers/" -type d -name "Stable*" | sort | tail -n 1)
export EDITOR="$tmp_code/server/bin/remote-cli/code --wait"


# source    $HOME/algo/s_setup_home.sh
if [ -f /usr/share/bash-completion/completions/git ]; then
    . /usr/share/bash-completion/completions/git
fi

#  aliases
alias acre="acr dmmeta.ns:atf_snf -ndown 99  -tree -e"
alias ci="atf_ci -cijob:% |& timestamps"
alias ci_clean="rm -rf temp/sand*"
alias ppath='echo $PATH | tr ":" "\n"'
alias gitlog='git log --oneline --graph --decorate --all --date=iso-strict'
alias gitbin='git checkout -- bin'


alias al='source  ~/arnd/conf/alexei/bash_profile'

# cp common files
cp ~/av_openacr/homefiles/.gitconfig ~/.gitconfig
export GIT_SSH_COMMAND="ssh -i $HOME/.ssh/algox2_gitlab"
cp ~/av_openacr/homefiles/.gdbinit ~/.gdbinit

abtd(){
 bin/abt -target:% -cfg:debug
 abt   -cfg:debug % -install
#  abt   -cfg:release % -install
#  ls -ltr bin/x2*
}


up() {
  # return
  set -x
  rsync -ac --delete \
    . x2usr@dev.x2-17:arnd
  rsync -ac --delete ../av_openacr  x2usr@dev.x2-17:
  rsync -ac --delete ../.bashrc  x2usr@dev.x2-17:
  set +x
    # --exclude=temp/ \
    # --exclude=build/debug \
    # --exclude=build/release \
    # --exclude=build/x2ui \
    # --exclude=node_modules \
    # --exclude=ts \
}

down() {
  set -x
  # only active code  files
  rsync -ac --delete x2usr@dev.x2-17:arnd/  ~/arnd
  # rsync -ac --delete x2usr@dev.x2-17:arnd/cpp/x2gw/kafka.cpp     ~/arnd/cpp/x2gw/kafka.cpp
  # rsync -ac --delete x2usr@dev.x2-17:arnd/cpp/lib_kafka/encode.cpp     ~/arnd/cpp/lib_kafka/encode.cpp
  set +x
}

down_rdpui() {
  set -x

  rsync -ac --delete rdpusr@dev.rdpui-5:rdp_console_log     ~/av_openacr/om_logs/rdpui-5.rdp_console.log
   tail -n 20  /home/avorovich/av_openacr/om_logs/rdpui-5.rdp_console.log > /tmp/tmp.log && mv /tmp/tmp.log /home/avorovich/av_openacr/om_logs/rdpui-5.rdp_console.log

  set +x
}

# # copy all important log files from the omenv
# down_env() {

#   down_kafka_worker() {
#     local omenv="$1"
#     local node="$2"
#     local node_dir="$down_root/$omenv/$node"

#     rm -rf "$node_dir"
#     mkdir -p "$node_dir"

#     rsync -ac --delete kafkawrkr@"$node":kafka_worker.log "$node_dir/"
#     rsync -ac --delete kafkawrkr@"$node":"$node" "$node_dir/$node.sh"
#   }

#   down_kafka_broker() {
#     local omenv="$1"
#     local node="$2"
#     local node_dir="$down_root/$omenv/$node"

#     rm -rf "$node_dir"
#     mkdir -p "$node_dir"

#     rsync -ac --delete kafkausr@"$node":"$node" "$node_dir/$node.sh"
#     rsync -ac $rem_opt --delete kafkausr@"$node":kafka/logs/server.log "$node_dir/"
#     rsync -ac $rem_opt --delete kafkausr@"$node":kafka/logs/controller.log "$node_dir/"
#     # rsync -ac --delete kafkausr@"$node":kafka/logs/kafka-authorizer.log "$node_dir/"
#     # rsync -ac --delete kafkausr@"$node":kafka/logs/kafka-request.log "$node_dir/"
#     # rsync -ac --delete kafkausr@"$node":kafka/logs/kafkaServer-gc.log "$node_dir/"
#   }

#   omenv=ak-8
#   down_root="$HOME/av_openacr/om_logs"
#   rem_opt=""
#   # rem_opt="--remove-source-files"
  

#   rm -rf "$down_root/$omenv" 
#   mkdir -p "$down_root/$omenv"

#   down_kafka_worker "$omenv" dev.kafkaw-08
#   down_kafka_worker "$omenv" dev.kafkaw-16
#   down_kafka_broker "$omenv" dev.kafka-01
#   down_kafka_broker "$omenv" dev.kafka-02
#   down_kafka_broker "$omenv" dev.kafka-03
#   down_kafka_broker "$omenv" dev.kafka-04
# }

# dloop() {
#   while true; do
#     down_env
#     sleep 1
#   done
# }



gitlog1() {
  git log --oneline --decorate --pretty=format:"%h %ad %an | %s%d" --date=format:"%m-%d %H:%M" "$@"

}
gco() {
  # Check for uncommitted changes

  # Check if a branch name is passed as an argument or prompt the user
  if [ -z "$1" ]; then
    read -p "Enter branch name: " branch
  else
    branch=$1
  fi

  # Checkout the branch
  git checkout algornd/arnd.$branch

  # Display the last two commits
  echo "Last  commits on branch algornd/arnd.$branch:"
  git log -n 3 --oneline --date=local

  # echo " recompile , man !!"
  # abtd
}


gb(){
  git for-each-ref \
   --sort=-committerdate \
   --format="%(refname:short) - %(committername) %(committerdate:short) - %(subject)" \
  refs/heads/ | \
  while read branch rest; do
    ahead=$(git rev-list --count "$branch" ^master)
    behind=$(git rev-list --count master ^"$branch")
    printf "%-16s  - [ahead %d, behind %d] %s \n"  "$branch"  "$ahead" "$behind" "$rest"
  done
  echo "     "
  echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
}

ident(){
     bin/cpp-indent  ${file}; update-hdr
}

# set -x
# from alexei as of 5/14/25

if [ "$PS1" != "" ]; then
    unset SSH_ASKPASS
    HISTFILESIZE=100000
    HISTCONTROL="ignoreboth"
    alias more=less
    shopt -s histappend
    PROMPT_COMMAND='history -a'
    bind "set completion-query-items 1000"
    HOSTNAME=`hostname -f 2>/dev/null`
    PS1="\e[0;34m[\$? \D{%b %d %H:%M:%S}] \u@$HOSTNAME\e[0;32m:\w\e[m \n\$ "
    LS_OPTIONS='--color=auto --quoting-style=shell'

    # PREV="$PWD"
    # cd $(dirname $(dirname $(dirname "$(readlink -f ~/.bash_profile)"))) 2>/dev/null && $(bin/acr_compl -install)
    # cd "$PREV"
    PREV="$PWD"
    cd $HOME/arnd
    acr_compl -install >/dev/null 2>&1
    cd "$PREV"
fi

# acr_compl -install needs a list of executables to work
# so it cannot be invoked until we switch to a particular directory
function beginwork() {
    cd "$1"
    $(acr_compl -install)
}
# beginwork
# export section
export PS1
export LS_OPTIONS
export PATH
export EDITOR
export HISTFILESIZE
export HISTCONTROL
export PROMPT_COMMAND
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export TERM=xterm-256color
