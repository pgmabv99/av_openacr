atf_snf.frame_stats  direction:"c->b"  tcp_short:108.1-108.5  tcp_pair_key:192.168.108.1:55122-192.168.108.5:1047  frame_count:61  syn_count:1  fin_count:0  rst_count:0  isn:003773902880  tcp_payload_len_tot:000000001513
atf_snf.frame_err  !!seq_gap_pos_count:2
atf_snf.kafka_stats  client_id_key:redpanda-console  kafka_count:36  kafka_req_ack_count:36  kafka_count_in_bh:36  pct_non_ack!!!:0  kafka_len_tot:000000001513


iframe:000000000005  ts_ns:1633355988340467  c_port:55122 kafka2.ApiVersionsRequest  request_api_version:3  correlation_id:0  client_id:redpanda-console  client_software_name:kgo  client_software_version:v1.18.0
iframe:000000000007  ts_ns:1633355994239584  c_port:55122 kafka2.ApiVersionsResponse  request_api_version:3  correlation_id:0  error_code:0  api_keys.0:"kafka2.ApiVersion18a  api_key:0  min_version:0  max_version:11"  api_keys.1:"kafka2.ApiVersion18a  api_key:1  min_version:0  max_version:17"  api_keys.2:"kafka2.ApiVersion18a  api_key:2  min_version:0  max_version:9"  api_keys.3:"kafka2.ApiVersion18a  api_key:3  min_version:0  max_version:12"  api_keys.4:"kafka2.ApiVersion18a  api_key:8  min_version:0  max_version:9"  api_keys.5:"kafka2.ApiVersion18a  api_key:9  min_version:0  max_version:9"  api_keys.6:"kafka2.ApiVersion18a  api_key:10  min_version:0  max_version:6"  api_keys.7:"kafka2.ApiVersion18a  api_key:11  min_version:0  max_version:9"  api_keys.8:"kafka2.ApiVersion18a  api_key:12  min_version:0  max_version:4"  api_keys.9:"kafka2.ApiVersion18a  api_key:13  min_version:0  max_version:5"  api_keys.10:"kafka2.ApiVersion18a  api_key:14  min_version:0  max_version:5"  api_keys.11:"kafka2.ApiVersion18a  api_key:15  min_version:0  max_version:5"  api_keys.12:"kafka2.ApiVersion18a  api_key:16  min_version:0  max_version:5"  api_keys.13:"kafka2.ApiVersion18a  api_key:17  min_version:0  max_version:1"  api_keys.14:"kafka2.ApiVersion18a  api_key:18  min_version:0  max_version:4"  api_keys.15:"kafka2.ApiVersion18a  api_key:19  min_version:0  max_version:7"  api_keys.16:"kafka2.ApiVersion18a  api_key:20  min_version:0  max_version:6"  api_keys.17:"kafka2.ApiVersion18a  api_key:21  min_version:0  max_version:2"  api_keys.18:"kafka2.ApiVersion18a  api_key:22  min_version:0  max_version:5"  api_keys.19:"kafka2.ApiVersion18a  api_key:23  min_version:0  max_version:4"  api_keys.20:"kafka2.ApiVersion18a  api_key:24  min_version:0  max_version:5"  api_keys.21:"kafka2.ApiVersion18a  api_key:25  min_version:0  max_version:4"  api_keys.22:"kafka2.ApiVersion18a  api_key:26  min_version:0  max_version:4"  api_keys.23:"kafka2.ApiVersion18a  api_key:27  min_version:0  max_version:1"  api_keys.24:"kafka2.ApiVersion18a  api_key:28  min_version:0  max_version:4"  api_keys.25:"kafka2.ApiVersion18a  api_key:29  min_version:0  max_version:3"  api_keys.26:"kafka2.ApiVersion18a  api_key:30  min_version:0  max_version:3"  api_keys.27:"kafka2.ApiVersion18a  api_key:31  min_version:0  max_version:3"  api_keys.28:"kafka2.ApiVersion18a  api_key:32  min_version:0  max_version:4"  api_keys.29:"kafka2.ApiVersion18a  api_key:33  min_version:0  max_version:2"  api_keys.30:"kafka2.ApiVersion18a  api_key:34  min_version:0  max_version:2"  api_keys.31:"kafka2.ApiVersion18a  api_key:35  min_version:0  max_version:4"  api_keys.32:"kafka2.ApiVersion18a  api_key:36  min_version:0  max_version:2"  api_keys.33:"kafka2.ApiVersion18a  api_key:37  min_version:0  max_version:3"  api_keys.34:"kafka2.ApiVersion18a  api_key:38  min_version:0  max_version:3"  api_keys.35:"kafka2.ApiVersion18a  api_key:39  min_version:0  max_version:2"  api_keys.36:"kafka2.ApiVersion18a  api_key:40  min_version:0  max_version:2"  api_keys.37:"kafka2.ApiVersion18a  api_key:41  min_version:0  max_version:3"  api_keys.38:"kafka2.ApiVersion18a  api_key:42  min_version:0  max_version:2"  api_keys.39:"kafka2.ApiVersion18a  api_key:43  min_version:0  max_version:2"  api_keys.40:"kafka2.ApiVersion18a  api_key:44  min_version:0  max_version:1"  api_keys.41:"kafka2.ApiVersion18a  api_key:45  min_version:0  max_version:0"  api_keys.42:"kafka2.ApiVersion18a  api_key:46  min_version:0  max_version:0"  api_keys.43:"kafka2.ApiVersion18a  api_key:47  min_version:0  max_version:0"  api_keys.44:"kafka2.ApiVersion18a  api_key:48  min_version:0  max_version:1"  api_keys.45:"kafka2.ApiVersion18a  api_key:49  min_version:0  max_version:1"  api_keys.46:"kafka2.ApiVersion18a  api_key:50  min_version:0  max_version:0"  api_keys.47:"kafka2.ApiVersion18a  api_key:51  min_version:0  max_version:0"  api_keys.48:"kafka2.ApiVersion18a  api_key:55  min_version:0  max_version:2"  api_keys.49:"kafka2.ApiVersion18a  api_key:57  min_version:0  max_version:1"  api_keys.50:"kafka2.ApiVersion18a  api_key:60  min_version:0  max_version:1"  api_keys.51:"kafka2.ApiVersion18a  api_key:61  min_version:0  max_version:0"  api_keys.52:"kafka2.ApiVersion18a  api_key:64  min_version:0  max_version:0"  api_keys.53:"kafka2.ApiVersion18a  api_key:65  min_version:0  max_version:0"  api_keys.54:"kafka2.ApiVersion18a  api_key:66  min_version:0  max_version:1"  api_keys.55:"kafka2.ApiVersion18a  api_key:68  min_version:0  max_version:0"  api_keys.56:"kafka2.ApiVersion18a  api_key:69  min_version:0  max_version:0"  api_keys.57:"kafka2.ApiVersion18a  api_key:74  min_version:0  max_version:0"  api_keys.58:"kafka2.ApiVersion18a  api_key:75  min_version:0  max_version:0"  api_keys.59:"kafka2.ApiVersion18a  api_key:80  min_version:0  max_version:0"  api_keys.60:"kafka2.ApiVersion18a  api_key:81  min_version:0  max_version:0"  throttle_time_ms:0
iframe:000000000009  ts_ns:1633355994505670  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:1  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000010  ts_ns:1633356012773785  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:1  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000103  ts_ns:1633395632153529  c_port:55122 kafka2.ApiVersionsRequest  request_api_version:3  correlation_id:2  client_id:redpanda-console  client_software_name:RPConsole  client_software_version:v2.8.2
iframe:000000000104  ts_ns:1633395633810176  c_port:55122 kafka2.ApiVersionsResponse  request_api_version:3  correlation_id:2  error_code:0  api_keys.0:"kafka2.ApiVersion18a  api_key:0  min_version:0  max_version:11"  api_keys.1:"kafka2.ApiVersion18a  api_key:1  min_version:0  max_version:17"  api_keys.2:"kafka2.ApiVersion18a  api_key:2  min_version:0  max_version:9"  api_keys.3:"kafka2.ApiVersion18a  api_key:3  min_version:0  max_version:12"  api_keys.4:"kafka2.ApiVersion18a  api_key:8  min_version:0  max_version:9"  api_keys.5:"kafka2.ApiVersion18a  api_key:9  min_version:0  max_version:9"  api_keys.6:"kafka2.ApiVersion18a  api_key:10  min_version:0  max_version:6"  api_keys.7:"kafka2.ApiVersion18a  api_key:11  min_version:0  max_version:9"  api_keys.8:"kafka2.ApiVersion18a  api_key:12  min_version:0  max_version:4"  api_keys.9:"kafka2.ApiVersion18a  api_key:13  min_version:0  max_version:5"  api_keys.10:"kafka2.ApiVersion18a  api_key:14  min_version:0  max_version:5"  api_keys.11:"kafka2.ApiVersion18a  api_key:15  min_version:0  max_version:5"  api_keys.12:"kafka2.ApiVersion18a  api_key:16  min_version:0  max_version:5"  api_keys.13:"kafka2.ApiVersion18a  api_key:17  min_version:0  max_version:1"  api_keys.14:"kafka2.ApiVersion18a  api_key:18  min_version:0  max_version:4"  api_keys.15:"kafka2.ApiVersion18a  api_key:19  min_version:0  max_version:7"  api_keys.16:"kafka2.ApiVersion18a  api_key:20  min_version:0  max_version:6"  api_keys.17:"kafka2.ApiVersion18a  api_key:21  min_version:0  max_version:2"  api_keys.18:"kafka2.ApiVersion18a  api_key:22  min_version:0  max_version:5"  api_keys.19:"kafka2.ApiVersion18a  api_key:23  min_version:0  max_version:4"  api_keys.20:"kafka2.ApiVersion18a  api_key:24  min_version:0  max_version:5"  api_keys.21:"kafka2.ApiVersion18a  api_key:25  min_version:0  max_version:4"  api_keys.22:"kafka2.ApiVersion18a  api_key:26  min_version:0  max_version:4"  api_keys.23:"kafka2.ApiVersion18a  api_key:27  min_version:0  max_version:1"  api_keys.24:"kafka2.ApiVersion18a  api_key:28  min_version:0  max_version:4"  api_keys.25:"kafka2.ApiVersion18a  api_key:29  min_version:0  max_version:3"  api_keys.26:"kafka2.ApiVersion18a  api_key:30  min_version:0  max_version:3"  api_keys.27:"kafka2.ApiVersion18a  api_key:31  min_version:0  max_version:3"  api_keys.28:"kafka2.ApiVersion18a  api_key:32  min_version:0  max_version:4"  api_keys.29:"kafka2.ApiVersion18a  api_key:33  min_version:0  max_version:2"  api_keys.30:"kafka2.ApiVersion18a  api_key:34  min_version:0  max_version:2"  api_keys.31:"kafka2.ApiVersion18a  api_key:35  min_version:0  max_version:4"  api_keys.32:"kafka2.ApiVersion18a  api_key:36  min_version:0  max_version:2"  api_keys.33:"kafka2.ApiVersion18a  api_key:37  min_version:0  max_version:3"  api_keys.34:"kafka2.ApiVersion18a  api_key:38  min_version:0  max_version:3"  api_keys.35:"kafka2.ApiVersion18a  api_key:39  min_version:0  max_version:2"  api_keys.36:"kafka2.ApiVersion18a  api_key:40  min_version:0  max_version:2"  api_keys.37:"kafka2.ApiVersion18a  api_key:41  min_version:0  max_version:3"  api_keys.38:"kafka2.ApiVersion18a  api_key:42  min_version:0  max_version:2"  api_keys.39:"kafka2.ApiVersion18a  api_key:43  min_version:0  max_version:2"  api_keys.40:"kafka2.ApiVersion18a  api_key:44  min_version:0  max_version:1"  api_keys.41:"kafka2.ApiVersion18a  api_key:45  min_version:0  max_version:0"  api_keys.42:"kafka2.ApiVersion18a  api_key:46  min_version:0  max_version:0"  api_keys.43:"kafka2.ApiVersion18a  api_key:47  min_version:0  max_version:0"  api_keys.44:"kafka2.ApiVersion18a  api_key:48  min_version:0  max_version:1"  api_keys.45:"kafka2.ApiVersion18a  api_key:49  min_version:0  max_version:1"  api_keys.46:"kafka2.ApiVersion18a  api_key:50  min_version:0  max_version:0"  api_keys.47:"kafka2.ApiVersion18a  api_key:51  min_version:0  max_version:0"  api_keys.48:"kafka2.ApiVersion18a  api_key:55  min_version:0  max_version:2"  api_keys.49:"kafka2.ApiVersion18a  api_key:57  min_version:0  max_version:1"  api_keys.50:"kafka2.ApiVersion18a  api_key:60  min_version:0  max_version:1"  api_keys.51:"kafka2.ApiVersion18a  api_key:61  min_version:0  max_version:0"  api_keys.52:"kafka2.ApiVersion18a  api_key:64  min_version:0  max_version:0"  api_keys.53:"kafka2.ApiVersion18a  api_key:65  min_version:0  max_version:0"  api_keys.54:"kafka2.ApiVersion18a  api_key:66  min_version:0  max_version:1"  api_keys.55:"kafka2.ApiVersion18a  api_key:68  min_version:0  max_version:0"  api_keys.56:"kafka2.ApiVersion18a  api_key:69  min_version:0  max_version:0"  api_keys.57:"kafka2.ApiVersion18a  api_key:74  min_version:0  max_version:0"  api_keys.58:"kafka2.ApiVersion18a  api_key:75  min_version:0  max_version:0"  api_keys.59:"kafka2.ApiVersion18a  api_key:80  min_version:0  max_version:0"  api_keys.60:"kafka2.ApiVersion18a  api_key:81  min_version:0  max_version:0"  throttle_time_ms:0
iframe:000000000107  ts_ns:1633395708174169  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:3  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000111  ts_ns:1633395709621120  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:3  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000109  ts_ns:1633395708291993  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:4  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000115  ts_ns:1633395710864320  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:4  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000119  ts_ns:1633395726493248  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:5  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000191  ts_ns:1633395727830348  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:5  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000198  ts_ns:1633395732443840  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:6  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000201  ts_ns:1633395733308704  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:6  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000200  ts_ns:1633395732490624  c_port:55122 kafka2.ApiVersionsRequest  request_api_version:3  correlation_id:7  client_id:redpanda-console  client_software_name:RPConsole  client_software_version:v2.8.2
iframe:000000000202  ts_ns:1633395734243065  c_port:55122 kafka2.ApiVersionsResponse  request_api_version:3  correlation_id:7  error_code:0  api_keys.0:"kafka2.ApiVersion18a  api_key:0  min_version:0  max_version:11"  api_keys.1:"kafka2.ApiVersion18a  api_key:1  min_version:0  max_version:17"  api_keys.2:"kafka2.ApiVersion18a  api_key:2  min_version:0  max_version:9"  api_keys.3:"kafka2.ApiVersion18a  api_key:3  min_version:0  max_version:12"  api_keys.4:"kafka2.ApiVersion18a  api_key:8  min_version:0  max_version:9"  api_keys.5:"kafka2.ApiVersion18a  api_key:9  min_version:0  max_version:9"  api_keys.6:"kafka2.ApiVersion18a  api_key:10  min_version:0  max_version:6"  api_keys.7:"kafka2.ApiVersion18a  api_key:11  min_version:0  max_version:9"  api_keys.8:"kafka2.ApiVersion18a  api_key:12  min_version:0  max_version:4"  api_keys.9:"kafka2.ApiVersion18a  api_key:13  min_version:0  max_version:5"  api_keys.10:"kafka2.ApiVersion18a  api_key:14  min_version:0  max_version:5"  api_keys.11:"kafka2.ApiVersion18a  api_key:15  min_version:0  max_version:5"  api_keys.12:"kafka2.ApiVersion18a  api_key:16  min_version:0  max_version:5"  api_keys.13:"kafka2.ApiVersion18a  api_key:17  min_version:0  max_version:1"  api_keys.14:"kafka2.ApiVersion18a  api_key:18  min_version:0  max_version:4"  api_keys.15:"kafka2.ApiVersion18a  api_key:19  min_version:0  max_version:7"  api_keys.16:"kafka2.ApiVersion18a  api_key:20  min_version:0  max_version:6"  api_keys.17:"kafka2.ApiVersion18a  api_key:21  min_version:0  max_version:2"  api_keys.18:"kafka2.ApiVersion18a  api_key:22  min_version:0  max_version:5"  api_keys.19:"kafka2.ApiVersion18a  api_key:23  min_version:0  max_version:4"  api_keys.20:"kafka2.ApiVersion18a  api_key:24  min_version:0  max_version:5"  api_keys.21:"kafka2.ApiVersion18a  api_key:25  min_version:0  max_version:4"  api_keys.22:"kafka2.ApiVersion18a  api_key:26  min_version:0  max_version:4"  api_keys.23:"kafka2.ApiVersion18a  api_key:27  min_version:0  max_version:1"  api_keys.24:"kafka2.ApiVersion18a  api_key:28  min_version:0  max_version:4"  api_keys.25:"kafka2.ApiVersion18a  api_key:29  min_version:0  max_version:3"  api_keys.26:"kafka2.ApiVersion18a  api_key:30  min_version:0  max_version:3"  api_keys.27:"kafka2.ApiVersion18a  api_key:31  min_version:0  max_version:3"  api_keys.28:"kafka2.ApiVersion18a  api_key:32  min_version:0  max_version:4"  api_keys.29:"kafka2.ApiVersion18a  api_key:33  min_version:0  max_version:2"  api_keys.30:"kafka2.ApiVersion18a  api_key:34  min_version:0  max_version:2"  api_keys.31:"kafka2.ApiVersion18a  api_key:35  min_version:0  max_version:4"  api_keys.32:"kafka2.ApiVersion18a  api_key:36  min_version:0  max_version:2"  api_keys.33:"kafka2.ApiVersion18a  api_key:37  min_version:0  max_version:3"  api_keys.34:"kafka2.ApiVersion18a  api_key:38  min_version:0  max_version:3"  api_keys.35:"kafka2.ApiVersion18a  api_key:39  min_version:0  max_version:2"  api_keys.36:"kafka2.ApiVersion18a  api_key:40  min_version:0  max_version:2"  api_keys.37:"kafka2.ApiVersion18a  api_key:41  min_version:0  max_version:3"  api_keys.38:"kafka2.ApiVersion18a  api_key:42  min_version:0  max_version:2"  api_keys.39:"kafka2.ApiVersion18a  api_key:43  min_version:0  max_version:2"  api_keys.40:"kafka2.ApiVersion18a  api_key:44  min_version:0  max_version:1"  api_keys.41:"kafka2.ApiVersion18a  api_key:45  min_version:0  max_version:0"  api_keys.42:"kafka2.ApiVersion18a  api_key:46  min_version:0  max_version:0"  api_keys.43:"kafka2.ApiVersion18a  api_key:47  min_version:0  max_version:0"  api_keys.44:"kafka2.ApiVersion18a  api_key:48  min_version:0  max_version:1"  api_keys.45:"kafka2.ApiVersion18a  api_key:49  min_version:0  max_version:1"  api_keys.46:"kafka2.ApiVersion18a  api_key:50  min_version:0  max_version:0"  api_keys.47:"kafka2.ApiVersion18a  api_key:51  min_version:0  max_version:0"  api_keys.48:"kafka2.ApiVersion18a  api_key:55  min_version:0  max_version:2"  api_keys.49:"kafka2.ApiVersion18a  api_key:57  min_version:0  max_version:1"  api_keys.50:"kafka2.ApiVersion18a  api_key:60  min_version:0  max_version:1"  api_keys.51:"kafka2.ApiVersion18a  api_key:61  min_version:0  max_version:0"  api_keys.52:"kafka2.ApiVersion18a  api_key:64  min_version:0  max_version:0"  api_keys.53:"kafka2.ApiVersion18a  api_key:65  min_version:0  max_version:0"  api_keys.54:"kafka2.ApiVersion18a  api_key:66  min_version:0  max_version:1"  api_keys.55:"kafka2.ApiVersion18a  api_key:68  min_version:0  max_version:0"  api_keys.56:"kafka2.ApiVersion18a  api_key:69  min_version:0  max_version:0"  api_keys.57:"kafka2.ApiVersion18a  api_key:74  min_version:0  max_version:0"  api_keys.58:"kafka2.ApiVersion18a  api_key:75  min_version:0  max_version:0"  api_keys.59:"kafka2.ApiVersion18a  api_key:80  min_version:0  max_version:0"  api_keys.60:"kafka2.ApiVersion18a  api_key:81  min_version:0  max_version:0"  throttle_time_ms:0
iframe:000000000213  ts_ns:1633398117986163  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:8  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000217  ts_ns:1633398119351884  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:8  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000223  ts_ns:1633398149776883  c_port:55122 kafka2.DescribeConfigsRequest  request_api_version:3  correlation_id:9  client_id:redpanda-console  include_synonyms:Y  include_documentation:Y
iframe:000000000224  ts_ns:1633398150410470  c_port:55122 kafka2.DescribeConfigsResponse  request_api_version:3  correlation_id:9  throttle_time_ms:0
iframe:000000000239  ts_ns:1633405648274150  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:10  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000245  ts_ns:1633405656443494  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:10  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000241  ts_ns:1633405654148198  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:11  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000253  ts_ns:1633405658363968  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:11  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000248  ts_ns:1633405656730822  c_port:55122 kafka2.DescribeConfigsRequest  request_api_version:3  correlation_id:12  client_id:redpanda-console  resources.0:"kafka2.DescribeConfigsResource32q  resource_type:2  resource_name:ap1  configuration_keys.0:cleanup.policy"  include_synonyms:Y  include_documentation:Y
iframe:000000000256  ts_ns:1633405663316857  c_port:55122 kafka2.DescribeConfigsResponse  request_api_version:3  correlation_id:12  throttle_time_ms:0  results.0:'kafka2.DescribeConfigsResult32a  error_code:0  error_message:""  resource_type:2  resource_name:ap1  configs.0:\'kafka2.DescribeConfigsResourceResult32a  name:cleanup.policy  value:delete  read_only:N  config_source:1  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:cleanup.policy  value:delete  source:1"  synonyms.1:"kafka2.DescribeConfigsSynonym32a  name:log.cleanup.policy  value:delete  source:5"  config_type:7  documentation:\\\'This config designates the retention policy to use on log segments. The "delete" policy (which is the default) will discard old segments when their retention time or size limit has been reached. The "compact" policy will enable <a href="#compaction">log compaction</a>, which retains the latest value for each key. It is also possible to specify both policies in a comma-separated list (e.g. "delete,compact"). In this case, old segments will be discarded per the retention time and size configuration, while retained segments will be compacted.\\\'\''
iframe:000000000260  ts_ns:1633417600021248  c_port:55122 kafka2.DescribeAclsRequest  request_api_version:2  correlation_id:13  client_id:redpanda-console  resource_type_filter:1  pattern_type_filter:1  operation:1  permission_type:1
iframe:000000000265  ts_ns:1633417601111795  c_port:55122 kafka2.DescribeAclsResponse  request_api_version:2  correlation_id:13  throttle_time_ms:0  error_code:0  error_message:""
iframe:000000000262  ts_ns:1633417600064499  c_port:55122 kafka2.ApiVersionsRequest  request_api_version:3  correlation_id:14  client_id:redpanda-console  client_software_name:RPConsole  client_software_version:v2.8.2
iframe:000000000269  ts_ns:1633417602324640  c_port:55122 kafka2.ApiVersionsResponse  request_api_version:3  correlation_id:14  error_code:0  api_keys.0:"kafka2.ApiVersion18a  api_key:0  min_version:0  max_version:11"  api_keys.1:"kafka2.ApiVersion18a  api_key:1  min_version:0  max_version:17"  api_keys.2:"kafka2.ApiVersion18a  api_key:2  min_version:0  max_version:9"  api_keys.3:"kafka2.ApiVersion18a  api_key:3  min_version:0  max_version:12"  api_keys.4:"kafka2.ApiVersion18a  api_key:8  min_version:0  max_version:9"  api_keys.5:"kafka2.ApiVersion18a  api_key:9  min_version:0  max_version:9"  api_keys.6:"kafka2.ApiVersion18a  api_key:10  min_version:0  max_version:6"  api_keys.7:"kafka2.ApiVersion18a  api_key:11  min_version:0  max_version:9"  api_keys.8:"kafka2.ApiVersion18a  api_key:12  min_version:0  max_version:4"  api_keys.9:"kafka2.ApiVersion18a  api_key:13  min_version:0  max_version:5"  api_keys.10:"kafka2.ApiVersion18a  api_key:14  min_version:0  max_version:5"  api_keys.11:"kafka2.ApiVersion18a  api_key:15  min_version:0  max_version:5"  api_keys.12:"kafka2.ApiVersion18a  api_key:16  min_version:0  max_version:5"  api_keys.13:"kafka2.ApiVersion18a  api_key:17  min_version:0  max_version:1"  api_keys.14:"kafka2.ApiVersion18a  api_key:18  min_version:0  max_version:4"  api_keys.15:"kafka2.ApiVersion18a  api_key:19  min_version:0  max_version:7"  api_keys.16:"kafka2.ApiVersion18a  api_key:20  min_version:0  max_version:6"  api_keys.17:"kafka2.ApiVersion18a  api_key:21  min_version:0  max_version:2"  api_keys.18:"kafka2.ApiVersion18a  api_key:22  min_version:0  max_version:5"  api_keys.19:"kafka2.ApiVersion18a  api_key:23  min_version:0  max_version:4"  api_keys.20:"kafka2.ApiVersion18a  api_key:24  min_version:0  max_version:5"  api_keys.21:"kafka2.ApiVersion18a  api_key:25  min_version:0  max_version:4"  api_keys.22:"kafka2.ApiVersion18a  api_key:26  min_version:0  max_version:4"  api_keys.23:"kafka2.ApiVersion18a  api_key:27  min_version:0  max_version:1"  api_keys.24:"kafka2.ApiVersion18a  api_key:28  min_version:0  max_version:4"  api_keys.25:"kafka2.ApiVersion18a  api_key:29  min_version:0  max_version:3"  api_keys.26:"kafka2.ApiVersion18a  api_key:30  min_version:0  max_version:3"  api_keys.27:"kafka2.ApiVersion18a  api_key:31  min_version:0  max_version:3"  api_keys.28:"kafka2.ApiVersion18a  api_key:32  min_version:0  max_version:4"  api_keys.29:"kafka2.ApiVersion18a  api_key:33  min_version:0  max_version:2"  api_keys.30:"kafka2.ApiVersion18a  api_key:34  min_version:0  max_version:2"  api_keys.31:"kafka2.ApiVersion18a  api_key:35  min_version:0  max_version:4"  api_keys.32:"kafka2.ApiVersion18a  api_key:36  min_version:0  max_version:2"  api_keys.33:"kafka2.ApiVersion18a  api_key:37  min_version:0  max_version:3"  api_keys.34:"kafka2.ApiVersion18a  api_key:38  min_version:0  max_version:3"  api_keys.35:"kafka2.ApiVersion18a  api_key:39  min_version:0  max_version:2"  api_keys.36:"kafka2.ApiVersion18a  api_key:40  min_version:0  max_version:2"  api_keys.37:"kafka2.ApiVersion18a  api_key:41  min_version:0  max_version:3"  api_keys.38:"kafka2.ApiVersion18a  api_key:42  min_version:0  max_version:2"  api_keys.39:"kafka2.ApiVersion18a  api_key:43  min_version:0  max_version:2"  api_keys.40:"kafka2.ApiVersion18a  api_key:44  min_version:0  max_version:1"  api_keys.41:"kafka2.ApiVersion18a  api_key:45  min_version:0  max_version:0"  api_keys.42:"kafka2.ApiVersion18a  api_key:46  min_version:0  max_version:0"  api_keys.43:"kafka2.ApiVersion18a  api_key:47  min_version:0  max_version:0"  api_keys.44:"kafka2.ApiVersion18a  api_key:48  min_version:0  max_version:1"  api_keys.45:"kafka2.ApiVersion18a  api_key:49  min_version:0  max_version:1"  api_keys.46:"kafka2.ApiVersion18a  api_key:50  min_version:0  max_version:0"  api_keys.47:"kafka2.ApiVersion18a  api_key:51  min_version:0  max_version:0"  api_keys.48:"kafka2.ApiVersion18a  api_key:55  min_version:0  max_version:2"  api_keys.49:"kafka2.ApiVersion18a  api_key:57  min_version:0  max_version:1"  api_keys.50:"kafka2.ApiVersion18a  api_key:60  min_version:0  max_version:1"  api_keys.51:"kafka2.ApiVersion18a  api_key:61  min_version:0  max_version:0"  api_keys.52:"kafka2.ApiVersion18a  api_key:64  min_version:0  max_version:0"  api_keys.53:"kafka2.ApiVersion18a  api_key:65  min_version:0  max_version:0"  api_keys.54:"kafka2.ApiVersion18a  api_key:66  min_version:0  max_version:1"  api_keys.55:"kafka2.ApiVersion18a  api_key:68  min_version:0  max_version:0"  api_keys.56:"kafka2.ApiVersion18a  api_key:69  min_version:0  max_version:0"  api_keys.57:"kafka2.ApiVersion18a  api_key:74  min_version:0  max_version:0"  api_keys.58:"kafka2.ApiVersion18a  api_key:75  min_version:0  max_version:0"  api_keys.59:"kafka2.ApiVersion18a  api_key:80  min_version:0  max_version:0"  api_keys.60:"kafka2.ApiVersion18a  api_key:81  min_version:0  max_version:0"  throttle_time_ms:0
iframe:000000000264  ts_ns:1633417600977497  c_port:55122 kafka2.DescribeConfigsRequest  request_api_version:3  correlation_id:15  client_id:redpanda-console  resources.0:"kafka2.DescribeConfigsResource32q  resource_type:2  resource_name:ap1"  include_synonyms:Y  include_documentation:Y
iframe:000000000285  ts_ns:1633417605610400  c_port:55122 kafka2.DescribeConfigsResponse  request_api_version:3  correlation_id:15  throttle_time_ms:0  results.0:'kafka2.DescribeConfigsResult32a  error_code:0  error_message:""  resource_type:2  resource_name:ap1  configs.0:"kafka2.DescribeConfigsResourceResult32a  name:compression.type  value:producer  read_only:N  config_source:5  is_sensitive:N  synonyms.0:\\"kafka2.DescribeConfigsSynonym32a  name:compression.type  value:producer  source:5\\"  config_type:2  documentation:\\"Specify the final compression type for a given topic. This configuration accepts the standard compression codecs (\'gzip\', \'snappy\', \'lz4\', \'zstd\'). It additionally accepts \'uncompressed\' which is equivalent to no compression; and \'producer\' which means retain the original compression codec set by the producer.\\""  configs.1:\'kafka2.DescribeConfigsResourceResult32a  name:remote.log.delete.on.disable  value:false  read_only:N  config_source:5  is_sensitive:N  config_type:1  documentation:"Determines whether tiered data for a topic should be deleted after tiered storage is disabled on a topic. This configuration should be enabled when trying to set `remote.storage.enable` from true to false"\'  configs.2:\'kafka2.DescribeConfigsResourceResult32a  name:leader.replication.throttled.replicas  value:""  read_only:N  config_source:5  is_sensitive:N  config_type:7  documentation:"A list of replicas for which log replication should be throttled on the leader side. The list should describe a set of replicas in the form [PartitionId]:[BrokerId],[PartitionId]:[BrokerId]:... or alternatively the wildcard \\\'*\\\' can be used to throttle all replicas for this topic."\'  configs.3:\'kafka2.DescribeConfigsResourceResult32a  name:remote.storage.enable  value:false  read_only:N  config_source:5  is_sensitive:N  config_type:1  documentation:"To enable tiered storage for a topic, set this configuration as true. You can not disable this config once it is enabled. It will be provided in future versions."\'  configs.4:\'kafka2.DescribeConfigsResourceResult32a  name:message.downconversion.enable  value:true  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.downconversion.enable  value:true  source:5"  config_type:1  documentation:"This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to <code>false</code>, broker will not perform down-conversion for consumers expecting an older message format. The broker responds with <code>UNSUPPORTED_VERSION</code> error for consume requests from such older clients. This configurationdoes not apply to any message format conversion that might be required for replication to followers."\'  configs.5:\'kafka2.DescribeConfigsResourceResult32a  name:min.insync.replicas  value:1  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:min.insync.replicas  value:1  source:5"  config_type:3  documentation:\\\'When a producer sets acks to "all" (or "-1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend).<br>When used together, <code>min.insync.replicas</code> and <code>acks</code> allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set <code>min.insync.replicas</code> to 2, and produce with <code>acks</code> of "all". This will ensure that the producer raises an exception if a majority of replicas do not receive a write.\\\'\'  configs.6:\'kafka2.DescribeConfigsResourceResult32a  name:segment.jitter.ms  value:0  read_only:N  config_source:5  is_sensitive:N  config_type:5  documentation:"The maximum random jitter subtracted from the scheduled segment roll time to avoid thundering herds of segment rolling"\'  configs.7:\'kafka2.DescribeConfigsResourceResult32a  name:remote.log.copy.disable  value:false  read_only:N  config_source:5  is_sensitive:N  config_type:1  documentation:"Determines whether tiered data for a topic should become read only, and no more data uploading on a topic. Once this config is set to true, the local retention configuration (i.e. local.retention.ms/bytes) becomes irrelevant, and all data expiration follows the topic-wide retention configuration(i.e. retention.ms/bytes)."\'  configs.8:\'kafka2.DescribeConfigsResourceResult32a  name:local.retention.ms  value:-2  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.local.retention.ms  value:-2  source:5"  config_type:5  documentation:"The number of milliseconds to keep the local log segment before it gets deleted. Default value is -2, it represents `retention.ms` value is to be used. The effective value should always be less than or equal to `retention.ms` value."\'  configs.9:\'kafka2.DescribeConfigsResourceResult32a  name:cleanup.policy  value:delete  read_only:N  config_source:1  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:cleanup.policy  value:delete  source:1"  synonyms.1:"kafka2.DescribeConfigsSynonym32a  name:log.cleanup.policy  value:delete  source:5"  config_type:7  documentation:\\\'This config designates the retention policy to use on log segments. The "delete" policy (which is the default) will discard old segments when their retention time or size limit has been reached. The "compact" policy will enable <a href="#compaction">log compaction</a>, which retains the latest value for each key. It is also possible to specify both policies in a comma-separated list (e.g. "delete,compact"). In this case, old segments will be discarded per the retention time and size configuration, while retained segments will be compacted.\\\'\'  configs.10:\'kafka2.DescribeConfigsResourceResult32a  name:flush.ms  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  config_type:5  documentation:"This setting allows specifying a time interval at which we will force an fsync of data written to the log. For example if this was set to 1000 we would fsync after 1000 ms had passed. In general we recommend you not set this and use replication for durability and allow the operating system\\\'s background flush capabilities as it is more efficient."\'  configs.11:\'kafka2.DescribeConfigsResourceResult32a  name:follower.replication.throttled.replicas  value:""  read_only:N  config_source:5  is_sensitive:N  config_type:7  documentation:"A list of replicas for which log replication should be throttled on the follower side. The list should describe a set of replicas in the form [PartitionId]:[BrokerId],[PartitionId]:[BrokerId]:... or alternatively the wildcard \\\'*\\\' can be used to throttle all replicas for this topic."\'  configs.12:\'kafka2.DescribeConfigsResourceResult32a  name:compression.lz4.level  value:9  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:compression.lz4.level  value:9  source:5"  config_type:3  documentation:"The compression level to use if compression.type is set to <code>lz4</code>."\'  configs.13:\'kafka2.DescribeConfigsResourceResult32a  name:segment.bytes  value:1073741824  read_only:N  config_source:4  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.segment.bytes  value:1073741824  source:4"  synonyms.1:"kafka2.DescribeConfigsSynonym32a  name:log.segment.bytes  value:1073741824  source:5"  config_type:3  documentation:"This configuration controls the segment file size for the log. Retention and cleaning is always done a file at a time so a larger segment size means fewer files but less granular control over retention."\'  configs.14:\'kafka2.DescribeConfigsResourceResult32a  name:retention.ms  value:604800000  read_only:N  config_source:5  is_sensitive:N  config_type:5  documentation:\\\'This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied. Additionally, retention.ms configuration operates independently of "segment.ms" and "segment.bytes" configurations. Moreover, it triggers the rolling of new segment if the retention.ms condition is satisfied.\\\'\'  configs.15:\'kafka2.DescribeConfigsResourceResult32a  name:compression.gzip.level  value:-1  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:compression.gzip.level  value:-1  source:5"  config_type:3  documentation:"The compression level to use if compression.type is set to <code>gzip</code>."\'  configs.16:\'kafka2.DescribeConfigsResourceResult32a  name:flush.messages  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.flush.interval.messages  value:9223372036854775807  source:5"  config_type:5  documentation:\\\'This setting allows specifying an interval at which we will force an fsync of data written to the log. For example if this was set to 1 we would fsync after every message; if it were 5 we would fsync after every five messages. In general we recommend you not set this and use replication for durability and allow the operating system\\\\\\\'s background flush capabilities as it is more efficient. This setting can be overridden on a per-topic basis (see <a href="#topicconfigs">the per-topic configuration section</a>).\\\'\'  configs.17:\'kafka2.DescribeConfigsResourceResult32a  name:compression.zstd.level  value:3  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:compression.zstd.level  value:3  source:5"  config_type:3  documentation:"The compression level to use if compression.type is set to <code>zstd</code>."\'  configs.18:\'kafka2.DescribeConfigsResourceResult32a  name:message.format.version  value:3.0-IV1  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.format.version  value:3.0-IV1  source:5"  config_type:2  documentation:"[DEPRECATED] Specify the message format version the broker will use to append messages to the logs. The value of this config is always assumed to be `3.0` if `inter.broker.protocol.version` is 3.0 or higher (the actual config value is ignored). Otherwise, the value should be a valid ApiVersion. Some examples are: 0.10.0, 1.1, 2.8, 3.0. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don\\\'t understand."\'  configs.19:\'kafka2.DescribeConfigsResourceResult32a  name:max.compaction.lag.ms  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.cleaner.max.compaction.lag.ms  value:9223372036854775807  source:5"  config_type:5  documentation:"The maximum time a message will remain ineligible for compaction in the log. Only applicable for logs that are being compacted."\'  configs.20:\'kafka2.DescribeConfigsResourceResult32a  name:file.delete.delay.ms  value:60000  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.segment.delete.delay.ms  value:60000  source:5"  config_type:5  documentation:"The time to wait before deleting a file from the filesystem"\'  configs.21:\'kafka2.DescribeConfigsResourceResult32a  name:max.message.bytes  value:10485760  read_only:N  config_source:4  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:message.max.bytes  value:10485760  source:4"  synonyms.1:"kafka2.DescribeConfigsSynonym32a  name:message.max.bytes  value:1048588  source:5"  config_type:3  documentation:"The largest record batch size allowed by Kafka (after compression if compression is enabled). If this is increased and there are consumers older than 0.10.2, the consumers\\\' fetch size must also be increased so that they can fetch record batches this large. In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case."\'  configs.22:\'kafka2.DescribeConfigsResourceResult32a  name:min.compaction.lag.ms  value:0  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.cleaner.min.compaction.lag.ms  value:0  source:5"  config_type:5  documentation:"The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted."\'  configs.23:\'kafka2.DescribeConfigsResourceResult32a  name:message.timestamp.type  value:CreateTime  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.timestamp.type  value:CreateTime  source:5"  config_type:2  documentation:"Define whether the timestamp in the message is message create time or log append time. The value should be either `CreateTime` or `LogAppendTime`"\'  configs.24:\'kafka2.DescribeConfigsResourceResult32a  name:local.retention.bytes  value:-2  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.local.retention.bytes  value:-2  source:5"  config_type:5  documentation:"The maximum size of local log segments that can grow for a partition before it deletes the old segments. Default value is -2, it represents `retention.bytes` value to be used. The effective value should always be less than or equal to `retention.bytes` value."\'  configs.25:\'kafka2.DescribeConfigsResourceResult32a  name:preallocate  value:false  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.preallocate  value:false  source:5"  config_type:1  documentation:"True if we should preallocate the file on disk when creating a new log segment."\'  configs.26:\'kafka2.DescribeConfigsResourceResult32a  name:min.cleanable.dirty.ratio  value:0.5  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.cleaner.min.cleanable.ratio  value:0.5  source:5"  config_type:6  documentation:\\\'This configuration controls how frequently the log compactor will attempt to clean the log (assuming <a href="#compaction">log compaction</a> is enabled). By default we will avoid cleaning a log where more than 50% of the log has been compacted. This ratio bounds the maximum space wasted in the log by duplicates (at 50% at most 50% of the log could be duplicates). A higher ratio will mean fewer, more efficient cleanings but will mean more wasted space in the log. If the max.compaction.lag.ms or the min.compaction.lag.ms configurations are also specified, then the log compactor considers the log to be eligible for compaction as soon as either: (i) the dirty ratio threshold has been met and the log has had dirty (uncompacted) records for at least the min.compaction.lag.ms duration, or (ii) if the log has had dirty (uncompacted) records for at most the max.compaction.lag.ms period.\\\'\'  configs.27:\'kafka2.DescribeConfigsResourceResult32a  name:index.interval.bytes  value:4096  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.index.interval.bytes  value:4096  source:5"  config_type:3  documentation:"This setting controls how frequently Kafka adds an index entry to its offset index. The default setting ensures that we index a message roughly every 4096 bytes. More indexing allows reads to jump closer to the exact position in the log but makes the index larger. You probably don\\\'t need to change this."\'  configs.28:\'kafka2.DescribeConfigsResourceResult32a  name:unclean.leader.election.enable  value:false  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:unclean.leader.election.enable  value:false  source:5"  config_type:1  documentation:"Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss.<p>Note: In KRaft mode, when enabling this config dynamically, it needs to wait for the unclean leader electionthread to trigger election periodically (default is 5 minutes). Please run `kafka-leader-election.sh` with `unclean` option to trigger the unclean leader election immediately if needed.</p>"\'  configs.29:\'kafka2.DescribeConfigsResourceResult32a  name:retention.bytes  value:-1  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.retention.bytes  value:-1  source:5"  config_type:5  documentation:\\\'This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy. By default there is no size limit only a time limit. Since this limit is enforced at the partition level, multiply it by the number of partitions to compute the topic retention in bytes. Additionally, retention.bytes configuration operates independently of "segment.ms" and "segment.bytes" configurations. Moreover, it triggers the rolling of new segment if the retention.bytes is configured to zero.\\\'\'  configs.30:\'kafka2.DescribeConfigsResourceResult32a  name:delete.retention.ms  value:86400000  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.cleaner.delete.retention.ms  value:86400000  source:5"  config_type:5  documentation:\\\'The amount of time to retain delete tombstone markers for <a href="#compaction">log compacted</a> topics. This setting also gives a bound on the time in which a consumer must complete a read if they begin from offset 0 to ensure that they get a valid snapshot of the final stage (otherwise delete tombstones may be collected before they complete their scan).\\\'\'  configs.31:\'kafka2.DescribeConfigsResourceResult32a  name:message.timestamp.after.max.ms  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.timestamp.after.max.ms  value:9223372036854775807  source:5"  config_type:5  documentation:"This configuration sets the allowable timestamp difference between the message timestamp and the broker\\\'s timestamp. The message timestamp can be later than or equal to the broker\\\'s timestamp, with the maximum allowable difference determined by the value set in this configuration. If message.timestamp.type=CreateTime, the message will be rejected if the difference in timestamps exceeds this specified threshold. This configuration is ignored if message.timestamp.type=LogAppendTime."\'  configs.32:\'kafka2.DescribeConfigsResourceResult32a  name:message.timestamp.before.max.ms  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.timestamp.before.max.ms  value:9223372036854775807  source:5"  config_type:5  documentation:"This configuration sets the allowable timestamp difference between the broker\\\'s timestamp and the message timestamp. The message timestamp can be earlier than or equal to the broker\\\'s timestamp, with the maximum allowable difference determined by the value set in this configuration. If message.timestamp.type=CreateTime, the message will be rejected if the difference in timestamps exceeds this specified threshold. This configuration is ignored if message.timestamp.type=LogAppendTime."\'  configs.33:\'kafka2.DescribeConfigsResourceResult32a  name:segment.ms  value:604800000  read_only:N  config_source:5  is_sensitive:N  config_type:5  documentation:"This configuration controls the period of time after which Kafka will force the log to roll even if the segment file isn\\\'t full to ensure that retention can delete or compact old data."\'  configs.34:\'kafka2.DescribeConfigsResourceResult32a  name:message.timestamp.difference.max.ms  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.timestamp.difference.max.ms  value:9223372036854775807  source:5"  config_type:5  documentation:"[DEPRECATED] The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if message.timestamp.type=LogAppendTime."\'  configs.35:\'kafka2.DescribeConfigsResourceResult32a  name:segment.index.bytes  value:10485760  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.index.size.max.bytes  value:10485760  source:5"  config_type:3  documentation:"This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting."\''
iframe:000000000274  ts_ns:1633417603907667  c_port:55122 kafka2.DescribeConfigsRequest  request_api_version:3  correlation_id:16  client_id:redpanda-console  resources.0:"kafka2.DescribeConfigsResource32q  resource_type:2  resource_name:ap1  configuration_keys.0:cleanup.policy"  include_synonyms:Y  include_documentation:Y
iframe:000000000292  ts_ns:1633417607702732  c_port:55122 kafka2.DescribeConfigsResponse  request_api_version:3  correlation_id:16  throttle_time_ms:0  results.0:'kafka2.DescribeConfigsResult32a  error_code:0  error_message:""  resource_type:2  resource_name:ap1  configs.0:\'kafka2.DescribeConfigsResourceResult32a  name:cleanup.policy  value:delete  read_only:N  config_source:1  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:cleanup.policy  value:delete  source:1"  synonyms.1:"kafka2.DescribeConfigsSynonym32a  name:log.cleanup.policy  value:delete  source:5"  config_type:7  documentation:\\\'This config designates the retention policy to use on log segments. The "delete" policy (which is the default) will discard old segments when their retention time or size limit has been reached. The "compact" policy will enable <a href="#compaction">log compaction</a>, which retains the latest value for each key. It is also possible to specify both policies in a comma-separated list (e.g. "delete,compact"). In this case, old segments will be discarded per the retention time and size configuration, while retained segments will be compacted.\\\'\''
iframe:000000000289  ts_ns:1633417605801420  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:17  client_id:redpanda-console  topics.0:"kafka2.MetadataRequestTopic3q  topic_id:00000000-0000-0000-0000-000000000000  name:ap1"  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000295  ts_ns:1633417608947065  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:17  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000358  ts_ns:1633440315824358  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:18  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000365  ts_ns:1633440317467878  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:18  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000360  ts_ns:1633440316284844  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:19  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000369  ts_ns:1633440318924972  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:19  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000362  ts_ns:1633440316641574  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:20  client_id:redpanda-console  topics.0:"kafka2.MetadataRequestTopic3q  topic_id:00000000-0000-0000-0000-000000000000  name:ap1"  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000370  ts_ns:1633440320070156  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:20  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000367  ts_ns:1633440317823808  c_port:55122 kafka2.DescribeConfigsRequest  request_api_version:3  correlation_id:21  client_id:redpanda-console  resources.0:"kafka2.DescribeConfigsResource32q  resource_type:2  resource_name:ap1  configuration_keys.0:cleanup.policy"  include_synonyms:Y  include_documentation:Y
iframe:000000000386  ts_ns:1633440322145504  c_port:55122 kafka2.DescribeConfigsResponse  request_api_version:3  correlation_id:21  throttle_time_ms:0  results.0:'kafka2.DescribeConfigsResult32a  error_code:0  error_message:""  resource_type:2  resource_name:ap1  configs.0:\'kafka2.DescribeConfigsResourceResult32a  name:cleanup.policy  value:delete  read_only:N  config_source:1  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:cleanup.policy  value:delete  source:1"  synonyms.1:"kafka2.DescribeConfigsSynonym32a  name:log.cleanup.policy  value:delete  source:5"  config_type:7  documentation:\\\'This config designates the retention policy to use on log segments. The "delete" policy (which is the default) will discard old segments when their retention time or size limit has been reached. The "compact" policy will enable <a href="#compaction">log compaction</a>, which retains the latest value for each key. It is also possible to specify both policies in a comma-separated list (e.g. "delete,compact"). In this case, old segments will be discarded per the retention time and size configuration, while retained segments will be compacted.\\\'\''
iframe:000000000374  ts_ns:1633440320368537  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:22  client_id:redpanda-console  topics.0:"kafka2.MetadataRequestTopic3q  topic_id:00000000-0000-0000-0000-000000000000  name:ap1"  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000389  ts_ns:1633440323291769  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:22  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000404  ts_ns:1633449876153766  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:23  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000405  ts_ns:1633449877894892  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:23  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000407  ts_ns:1633449878234585  c_port:55122 kafka2.DescribeConfigsRequest  request_api_version:3  correlation_id:24  client_id:redpanda-console  resources.0:"kafka2.DescribeConfigsResource32q  resource_type:2  resource_name:ap1  configuration_keys.0:cleanup.policy"  include_synonyms:Y  include_documentation:Y
iframe:000000000410  ts_ns:1633449880684153  c_port:55122 kafka2.DescribeConfigsResponse  request_api_version:3  correlation_id:24  throttle_time_ms:0  results.0:'kafka2.DescribeConfigsResult32a  error_code:0  error_message:""  resource_type:2  resource_name:ap1  configs.0:\'kafka2.DescribeConfigsResourceResult32a  name:cleanup.policy  value:delete  read_only:N  config_source:1  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:cleanup.policy  value:delete  source:1"  synonyms.1:"kafka2.DescribeConfigsSynonym32a  name:log.cleanup.policy  value:delete  source:5"  config_type:7  documentation:\\\'This config designates the retention policy to use on log segments. The "delete" policy (which is the default) will discard old segments when their retention time or size limit has been reached. The "compact" policy will enable <a href="#compaction">log compaction</a>, which retains the latest value for each key. It is also possible to specify both policies in a comma-separated list (e.g. "delete,compact"). In this case, old segments will be discarded per the retention time and size configuration, while retained segments will be compacted.\\\'\''
iframe:000000000412  ts_ns:1633449881709017  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:25  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000420  ts_ns:1633449884476409  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:25  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000414  ts_ns:1633449881750406  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:26  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000423  ts_ns:1633449885677043  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:26  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000416  ts_ns:1633449881781222  c_port:55122 kafka2.ApiVersionsRequest  request_api_version:3  correlation_id:27  client_id:redpanda-console  client_software_name:RPConsole  client_software_version:v2.8.2
iframe:000000000426  ts_ns:1633449886601881  c_port:55122 kafka2.ApiVersionsResponse  request_api_version:3  correlation_id:27  error_code:0  api_keys.0:"kafka2.ApiVersion18a  api_key:0  min_version:0  max_version:11"  api_keys.1:"kafka2.ApiVersion18a  api_key:1  min_version:0  max_version:17"  api_keys.2:"kafka2.ApiVersion18a  api_key:2  min_version:0  max_version:9"  api_keys.3:"kafka2.ApiVersion18a  api_key:3  min_version:0  max_version:12"  api_keys.4:"kafka2.ApiVersion18a  api_key:8  min_version:0  max_version:9"  api_keys.5:"kafka2.ApiVersion18a  api_key:9  min_version:0  max_version:9"  api_keys.6:"kafka2.ApiVersion18a  api_key:10  min_version:0  max_version:6"  api_keys.7:"kafka2.ApiVersion18a  api_key:11  min_version:0  max_version:9"  api_keys.8:"kafka2.ApiVersion18a  api_key:12  min_version:0  max_version:4"  api_keys.9:"kafka2.ApiVersion18a  api_key:13  min_version:0  max_version:5"  api_keys.10:"kafka2.ApiVersion18a  api_key:14  min_version:0  max_version:5"  api_keys.11:"kafka2.ApiVersion18a  api_key:15  min_version:0  max_version:5"  api_keys.12:"kafka2.ApiVersion18a  api_key:16  min_version:0  max_version:5"  api_keys.13:"kafka2.ApiVersion18a  api_key:17  min_version:0  max_version:1"  api_keys.14:"kafka2.ApiVersion18a  api_key:18  min_version:0  max_version:4"  api_keys.15:"kafka2.ApiVersion18a  api_key:19  min_version:0  max_version:7"  api_keys.16:"kafka2.ApiVersion18a  api_key:20  min_version:0  max_version:6"  api_keys.17:"kafka2.ApiVersion18a  api_key:21  min_version:0  max_version:2"  api_keys.18:"kafka2.ApiVersion18a  api_key:22  min_version:0  max_version:5"  api_keys.19:"kafka2.ApiVersion18a  api_key:23  min_version:0  max_version:4"  api_keys.20:"kafka2.ApiVersion18a  api_key:24  min_version:0  max_version:5"  api_keys.21:"kafka2.ApiVersion18a  api_key:25  min_version:0  max_version:4"  api_keys.22:"kafka2.ApiVersion18a  api_key:26  min_version:0  max_version:4"  api_keys.23:"kafka2.ApiVersion18a  api_key:27  min_version:0  max_version:1"  api_keys.24:"kafka2.ApiVersion18a  api_key:28  min_version:0  max_version:4"  api_keys.25:"kafka2.ApiVersion18a  api_key:29  min_version:0  max_version:3"  api_keys.26:"kafka2.ApiVersion18a  api_key:30  min_version:0  max_version:3"  api_keys.27:"kafka2.ApiVersion18a  api_key:31  min_version:0  max_version:3"  api_keys.28:"kafka2.ApiVersion18a  api_key:32  min_version:0  max_version:4"  api_keys.29:"kafka2.ApiVersion18a  api_key:33  min_version:0  max_version:2"  api_keys.30:"kafka2.ApiVersion18a  api_key:34  min_version:0  max_version:2"  api_keys.31:"kafka2.ApiVersion18a  api_key:35  min_version:0  max_version:4"  api_keys.32:"kafka2.ApiVersion18a  api_key:36  min_version:0  max_version:2"  api_keys.33:"kafka2.ApiVersion18a  api_key:37  min_version:0  max_version:3"  api_keys.34:"kafka2.ApiVersion18a  api_key:38  min_version:0  max_version:3"  api_keys.35:"kafka2.ApiVersion18a  api_key:39  min_version:0  max_version:2"  api_keys.36:"kafka2.ApiVersion18a  api_key:40  min_version:0  max_version:2"  api_keys.37:"kafka2.ApiVersion18a  api_key:41  min_version:0  max_version:3"  api_keys.38:"kafka2.ApiVersion18a  api_key:42  min_version:0  max_version:2"  api_keys.39:"kafka2.ApiVersion18a  api_key:43  min_version:0  max_version:2"  api_keys.40:"kafka2.ApiVersion18a  api_key:44  min_version:0  max_version:1"  api_keys.41:"kafka2.ApiVersion18a  api_key:45  min_version:0  max_version:0"  api_keys.42:"kafka2.ApiVersion18a  api_key:46  min_version:0  max_version:0"  api_keys.43:"kafka2.ApiVersion18a  api_key:47  min_version:0  max_version:0"  api_keys.44:"kafka2.ApiVersion18a  api_key:48  min_version:0  max_version:1"  api_keys.45:"kafka2.ApiVersion18a  api_key:49  min_version:0  max_version:1"  api_keys.46:"kafka2.ApiVersion18a  api_key:50  min_version:0  max_version:0"  api_keys.47:"kafka2.ApiVersion18a  api_key:51  min_version:0  max_version:0"  api_keys.48:"kafka2.ApiVersion18a  api_key:55  min_version:0  max_version:2"  api_keys.49:"kafka2.ApiVersion18a  api_key:57  min_version:0  max_version:1"  api_keys.50:"kafka2.ApiVersion18a  api_key:60  min_version:0  max_version:1"  api_keys.51:"kafka2.ApiVersion18a  api_key:61  min_version:0  max_version:0"  api_keys.52:"kafka2.ApiVersion18a  api_key:64  min_version:0  max_version:0"  api_keys.53:"kafka2.ApiVersion18a  api_key:65  min_version:0  max_version:0"  api_keys.54:"kafka2.ApiVersion18a  api_key:66  min_version:0  max_version:1"  api_keys.55:"kafka2.ApiVersion18a  api_key:68  min_version:0  max_version:0"  api_keys.56:"kafka2.ApiVersion18a  api_key:69  min_version:0  max_version:0"  api_keys.57:"kafka2.ApiVersion18a  api_key:74  min_version:0  max_version:0"  api_keys.58:"kafka2.ApiVersion18a  api_key:75  min_version:0  max_version:0"  api_keys.59:"kafka2.ApiVersion18a  api_key:80  min_version:0  max_version:0"  api_keys.60:"kafka2.ApiVersion18a  api_key:81  min_version:0  max_version:0"  throttle_time_ms:0
iframe:000000000419  ts_ns:1633449882380934  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:28  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000430  ts_ns:1633449887909817  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:28  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000504  ts_ns:1633452060576460  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:29  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000509  ts_ns:1633452062582176  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:29  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000505  ts_ns:1633452060822208  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:30  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000518  ts_ns:1633452064212921  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:30  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000508  ts_ns:1633452061335520  c_port:55122 kafka2.DescribeConfigsRequest  request_api_version:3  correlation_id:31  client_id:redpanda-console  resources.0:"kafka2.DescribeConfigsResource32q  resource_type:2  resource_name:ap1"  include_synonyms:Y  include_documentation:Y
iframe:000000000532  ts_ns:1633452066941312  c_port:55122 kafka2.DescribeConfigsResponse  request_api_version:3  correlation_id:31  throttle_time_ms:0  results.0:'kafka2.DescribeConfigsResult32a  error_code:0  error_message:""  resource_type:2  resource_name:ap1  configs.0:"kafka2.DescribeConfigsResourceResult32a  name:compression.type  value:producer  read_only:N  config_source:5  is_sensitive:N  synonyms.0:\\"kafka2.DescribeConfigsSynonym32a  name:compression.type  value:producer  source:5\\"  config_type:2  documentation:\\"Specify the final compression type for a given topic. This configuration accepts the standard compression codecs (\'gzip\', \'snappy\', \'lz4\', \'zstd\'). It additionally accepts \'uncompressed\' which is equivalent to no compression; and \'producer\' which means retain the original compression codec set by the producer.\\""  configs.1:\'kafka2.DescribeConfigsResourceResult32a  name:remote.log.delete.on.disable  value:false  read_only:N  config_source:5  is_sensitive:N  config_type:1  documentation:"Determines whether tiered data for a topic should be deleted after tiered storage is disabled on a topic. This configuration should be enabled when trying to set `remote.storage.enable` from true to false"\'  configs.2:\'kafka2.DescribeConfigsResourceResult32a  name:leader.replication.throttled.replicas  value:""  read_only:N  config_source:5  is_sensitive:N  config_type:7  documentation:"A list of replicas for which log replication should be throttled on the leader side. The list should describe a set of replicas in the form [PartitionId]:[BrokerId],[PartitionId]:[BrokerId]:... or alternatively the wildcard \\\'*\\\' can be used to throttle all replicas for this topic."\'  configs.3:\'kafka2.DescribeConfigsResourceResult32a  name:remote.storage.enable  value:false  read_only:N  config_source:5  is_sensitive:N  config_type:1  documentation:"To enable tiered storage for a topic, set this configuration as true. You can not disable this config once it is enabled. It will be provided in future versions."\'  configs.4:\'kafka2.DescribeConfigsResourceResult32a  name:message.downconversion.enable  value:true  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.downconversion.enable  value:true  source:5"  config_type:1  documentation:"This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to <code>false</code>, broker will not perform down-conversion for consumers expecting an older message format. The broker responds with <code>UNSUPPORTED_VERSION</code> error for consume requests from such older clients. This configurationdoes not apply to any message format conversion that might be required for replication to followers."\'  configs.5:\'kafka2.DescribeConfigsResourceResult32a  name:min.insync.replicas  value:1  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:min.insync.replicas  value:1  source:5"  config_type:3  documentation:\\\'When a producer sets acks to "all" (or "-1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend).<br>When used together, <code>min.insync.replicas</code> and <code>acks</code> allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set <code>min.insync.replicas</code> to 2, and produce with <code>acks</code> of "all". This will ensure that the producer raises an exception if a majority of replicas do not receive a write.\\\'\'  configs.6:\'kafka2.DescribeConfigsResourceResult32a  name:segment.jitter.ms  value:0  read_only:N  config_source:5  is_sensitive:N  config_type:5  documentation:"The maximum random jitter subtracted from the scheduled segment roll time to avoid thundering herds of segment rolling"\'  configs.7:\'kafka2.DescribeConfigsResourceResult32a  name:remote.log.copy.disable  value:false  read_only:N  config_source:5  is_sensitive:N  config_type:1  documentation:"Determines whether tiered data for a topic should become read only, and no more data uploading on a topic. Once this config is set to true, the local retention configuration (i.e. local.retention.ms/bytes) becomes irrelevant, and all data expiration follows the topic-wide retention configuration(i.e. retention.ms/bytes)."\'  configs.8:\'kafka2.DescribeConfigsResourceResult32a  name:local.retention.ms  value:-2  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.local.retention.ms  value:-2  source:5"  config_type:5  documentation:"The number of milliseconds to keep the local log segment before it gets deleted. Default value is -2, it represents `retention.ms` value is to be used. The effective value should always be less than or equal to `retention.ms` value."\'  configs.9:\'kafka2.DescribeConfigsResourceResult32a  name:cleanup.policy  value:delete  read_only:N  config_source:1  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:cleanup.policy  value:delete  source:1"  synonyms.1:"kafka2.DescribeConfigsSynonym32a  name:log.cleanup.policy  value:delete  source:5"  config_type:7  documentation:\\\'This config designates the retention policy to use on log segments. The "delete" policy (which is the default) will discard old segments when their retention time or size limit has been reached. The "compact" policy will enable <a href="#compaction">log compaction</a>, which retains the latest value for each key. It is also possible to specify both policies in a comma-separated list (e.g. "delete,compact"). In this case, old segments will be discarded per the retention time and size configuration, while retained segments will be compacted.\\\'\'  configs.10:\'kafka2.DescribeConfigsResourceResult32a  name:flush.ms  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  config_type:5  documentation:"This setting allows specifying a time interval at which we will force an fsync of data written to the log. For example if this was set to 1000 we would fsync after 1000 ms had passed. In general we recommend you not set this and use replication for durability and allow the operating system\\\'s background flush capabilities as it is more efficient."\'  configs.11:\'kafka2.DescribeConfigsResourceResult32a  name:follower.replication.throttled.replicas  value:""  read_only:N  config_source:5  is_sensitive:N  config_type:7  documentation:"A list of replicas for which log replication should be throttled on the follower side. The list should describe a set of replicas in the form [PartitionId]:[BrokerId],[PartitionId]:[BrokerId]:... or alternatively the wildcard \\\'*\\\' can be used to throttle all replicas for this topic."\'  configs.12:\'kafka2.DescribeConfigsResourceResult32a  name:compression.lz4.level  value:9  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:compression.lz4.level  value:9  source:5"  config_type:3  documentation:"The compression level to use if compression.type is set to <code>lz4</code>."\'  configs.13:\'kafka2.DescribeConfigsResourceResult32a  name:segment.bytes  value:1073741824  read_only:N  config_source:4  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.segment.bytes  value:1073741824  source:4"  synonyms.1:"kafka2.DescribeConfigsSynonym32a  name:log.segment.bytes  value:1073741824  source:5"  config_type:3  documentation:"This configuration controls the segment file size for the log. Retention and cleaning is always done a file at a time so a larger segment size means fewer files but less granular control over retention."\'  configs.14:\'kafka2.DescribeConfigsResourceResult32a  name:retention.ms  value:604800000  read_only:N  config_source:5  is_sensitive:N  config_type:5  documentation:\\\'This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy. This represents an SLA on how soon consumers must read their data. If set to -1, no time limit is applied. Additionally, retention.ms configuration operates independently of "segment.ms" and "segment.bytes" configurations. Moreover, it triggers the rolling of new segment if the retention.ms condition is satisfied.\\\'\'  configs.15:\'kafka2.DescribeConfigsResourceResult32a  name:compression.gzip.level  value:-1  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:compression.gzip.level  value:-1  source:5"  config_type:3  documentation:"The compression level to use if compression.type is set to <code>gzip</code>."\'  configs.16:\'kafka2.DescribeConfigsResourceResult32a  name:flush.messages  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.flush.interval.messages  value:9223372036854775807  source:5"  config_type:5  documentation:\\\'This setting allows specifying an interval at which we will force an fsync of data written to the log. For example if this was set to 1 we would fsync after every message; if it were 5 we would fsync after every five messages. In general we recommend you not set this and use replication for durability and allow the operating system\\\\\\\'s background flush capabilities as it is more efficient. This setting can be overridden on a per-topic basis (see <a href="#topicconfigs">the per-topic configuration section</a>).\\\'\'  configs.17:\'kafka2.DescribeConfigsResourceResult32a  name:compression.zstd.level  value:3  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:compression.zstd.level  value:3  source:5"  config_type:3  documentation:"The compression level to use if compression.type is set to <code>zstd</code>."\'  configs.18:\'kafka2.DescribeConfigsResourceResult32a  name:message.format.version  value:3.0-IV1  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.format.version  value:3.0-IV1  source:5"  config_type:2  documentation:"[DEPRECATED] Specify the message format version the broker will use to append messages to the logs. The value of this config is always assumed to be `3.0` if `inter.broker.protocol.version` is 3.0 or higher (the actual config value is ignored). Otherwise, the value should be a valid ApiVersion. Some examples are: 0.10.0, 1.1, 2.8, 3.0. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don\\\'t understand."\'  configs.19:\'kafka2.DescribeConfigsResourceResult32a  name:max.compaction.lag.ms  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.cleaner.max.compaction.lag.ms  value:9223372036854775807  source:5"  config_type:5  documentation:"The maximum time a message will remain ineligible for compaction in the log. Only applicable for logs that are being compacted."\'  configs.20:\'kafka2.DescribeConfigsResourceResult32a  name:file.delete.delay.ms  value:60000  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.segment.delete.delay.ms  value:60000  source:5"  config_type:5  documentation:"The time to wait before deleting a file from the filesystem"\'  configs.21:\'kafka2.DescribeConfigsResourceResult32a  name:max.message.bytes  value:10485760  read_only:N  config_source:4  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:message.max.bytes  value:10485760  source:4"  synonyms.1:"kafka2.DescribeConfigsSynonym32a  name:message.max.bytes  value:1048588  source:5"  config_type:3  documentation:"The largest record batch size allowed by Kafka (after compression if compression is enabled). If this is increased and there are consumers older than 0.10.2, the consumers\\\' fetch size must also be increased so that they can fetch record batches this large. In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case."\'  configs.22:\'kafka2.DescribeConfigsResourceResult32a  name:min.compaction.lag.ms  value:0  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.cleaner.min.compaction.lag.ms  value:0  source:5"  config_type:5  documentation:"The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted."\'  configs.23:\'kafka2.DescribeConfigsResourceResult32a  name:message.timestamp.type  value:CreateTime  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.timestamp.type  value:CreateTime  source:5"  config_type:2  documentation:"Define whether the timestamp in the message is message create time or log append time. The value should be either `CreateTime` or `LogAppendTime`"\'  configs.24:\'kafka2.DescribeConfigsResourceResult32a  name:local.retention.bytes  value:-2  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.local.retention.bytes  value:-2  source:5"  config_type:5  documentation:"The maximum size of local log segments that can grow for a partition before it deletes the old segments. Default value is -2, it represents `retention.bytes` value to be used. The effective value should always be less than or equal to `retention.bytes` value."\'  configs.25:\'kafka2.DescribeConfigsResourceResult32a  name:preallocate  value:false  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.preallocate  value:false  source:5"  config_type:1  documentation:"True if we should preallocate the file on disk when creating a new log segment."\'  configs.26:\'kafka2.DescribeConfigsResourceResult32a  name:min.cleanable.dirty.ratio  value:0.5  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.cleaner.min.cleanable.ratio  value:0.5  source:5"  config_type:6  documentation:\\\'This configuration controls how frequently the log compactor will attempt to clean the log (assuming <a href="#compaction">log compaction</a> is enabled). By default we will avoid cleaning a log where more than 50% of the log has been compacted. This ratio bounds the maximum space wasted in the log by duplicates (at 50% at most 50% of the log could be duplicates). A higher ratio will mean fewer, more efficient cleanings but will mean more wasted space in the log. If the max.compaction.lag.ms or the min.compaction.lag.ms configurations are also specified, then the log compactor considers the log to be eligible for compaction as soon as either: (i) the dirty ratio threshold has been met and the log has had dirty (uncompacted) records for at least the min.compaction.lag.ms duration, or (ii) if the log has had dirty (uncompacted) records for at most the max.compaction.lag.ms period.\\\'\'  configs.27:\'kafka2.DescribeConfigsResourceResult32a  name:index.interval.bytes  value:4096  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.index.interval.bytes  value:4096  source:5"  config_type:3  documentation:"This setting controls how frequently Kafka adds an index entry to its offset index. The default setting ensures that we index a message roughly every 4096 bytes. More indexing allows reads to jump closer to the exact position in the log but makes the index larger. You probably don\\\'t need to change this."\'  configs.28:\'kafka2.DescribeConfigsResourceResult32a  name:unclean.leader.election.enable  value:false  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:unclean.leader.election.enable  value:false  source:5"  config_type:1  documentation:"Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss.<p>Note: In KRaft mode, when enabling this config dynamically, it needs to wait for the unclean leader electionthread to trigger election periodically (default is 5 minutes). Please run `kafka-leader-election.sh` with `unclean` option to trigger the unclean leader election immediately if needed.</p>"\'  configs.29:\'kafka2.DescribeConfigsResourceResult32a  name:retention.bytes  value:-1  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.retention.bytes  value:-1  source:5"  config_type:5  documentation:\\\'This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy. By default there is no size limit only a time limit. Since this limit is enforced at the partition level, multiply it by the number of partitions to compute the topic retention in bytes. Additionally, retention.bytes configuration operates independently of "segment.ms" and "segment.bytes" configurations. Moreover, it triggers the rolling of new segment if the retention.bytes is configured to zero.\\\'\'  configs.30:\'kafka2.DescribeConfigsResourceResult32a  name:delete.retention.ms  value:86400000  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.cleaner.delete.retention.ms  value:86400000  source:5"  config_type:5  documentation:\\\'The amount of time to retain delete tombstone markers for <a href="#compaction">log compacted</a> topics. This setting also gives a bound on the time in which a consumer must complete a read if they begin from offset 0 to ensure that they get a valid snapshot of the final stage (otherwise delete tombstones may be collected before they complete their scan).\\\'\'  configs.31:\'kafka2.DescribeConfigsResourceResult32a  name:message.timestamp.after.max.ms  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.timestamp.after.max.ms  value:9223372036854775807  source:5"  config_type:5  documentation:"This configuration sets the allowable timestamp difference between the message timestamp and the broker\\\'s timestamp. The message timestamp can be later than or equal to the broker\\\'s timestamp, with the maximum allowable difference determined by the value set in this configuration. If message.timestamp.type=CreateTime, the message will be rejected if the difference in timestamps exceeds this specified threshold. This configuration is ignored if message.timestamp.type=LogAppendTime."\'  configs.32:\'kafka2.DescribeConfigsResourceResult32a  name:message.timestamp.before.max.ms  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.timestamp.before.max.ms  value:9223372036854775807  source:5"  config_type:5  documentation:"This configuration sets the allowable timestamp difference between the broker\\\'s timestamp and the message timestamp. The message timestamp can be earlier than or equal to the broker\\\'s timestamp, with the maximum allowable difference determined by the value set in this configuration. If message.timestamp.type=CreateTime, the message will be rejected if the difference in timestamps exceeds this specified threshold. This configuration is ignored if message.timestamp.type=LogAppendTime."\'  configs.33:\'kafka2.DescribeConfigsResourceResult32a  name:segment.ms  value:604800000  read_only:N  config_source:5  is_sensitive:N  config_type:5  documentation:"This configuration controls the period of time after which Kafka will force the log to roll even if the segment file isn\\\'t full to ensure that retention can delete or compact old data."\'  configs.34:\'kafka2.DescribeConfigsResourceResult32a  name:message.timestamp.difference.max.ms  value:9223372036854775807  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.message.timestamp.difference.max.ms  value:9223372036854775807  source:5"  config_type:5  documentation:"[DEPRECATED] The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if message.timestamp.type=LogAppendTime."\'  configs.35:\'kafka2.DescribeConfigsResourceResult32a  name:segment.index.bytes  value:10485760  read_only:N  config_source:5  is_sensitive:N  synonyms.0:"kafka2.DescribeConfigsSynonym32a  name:log.index.size.max.bytes  value:10485760  source:5"  config_type:3  documentation:"This configuration controls the size of the index that maps offsets to file positions. We preallocate this index file and shrink it only after log rolls. You generally should not need to change this setting."\''
iframe:000000000514  ts_ns:1633452062982745  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:32  client_id:redpanda-console  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000536  ts_ns:1633452068020249  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:32  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000516  ts_ns:1633452063022310  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:33  client_id:redpanda-console  topics.0:"kafka2.MetadataRequestTopic3q  topic_id:00000000-0000-0000-0000-000000000000  name:ap1"  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000539  ts_ns:1633452069286560  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:33  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000550  ts_ns:1633454054451020  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:34  client_id:redpanda-console  topics.0:"kafka2.MetadataRequestTopic3q  topic_id:00000000-0000-0000-0000-000000000000  name:ap1"  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000551  ts_ns:1633454056130950  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:34  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
iframe:000000000553  ts_ns:1633454056533305  c_port:55122 kafka2.MetadataRequest  request_api_version:9  correlation_id:35  client_id:redpanda-console  topics.0:"kafka2.MetadataRequestTopic3q  topic_id:00000000-0000-0000-0000-000000000000  name:ap1"  allow_auto_topic_creation:N  include_cluster_authorized_operations:N  include_topic_authorized_operations:N
iframe:000000000556  ts_ns:1633454058154899  c_port:55122 kafka2.MetadataResponse  request_api_version:9  correlation_id:35  throttle_time_ms:0  brokers.0:"kafka2.MetadataResponseBroker3a  node_id:4  host:dev.ak-8.kafka-4.ext-0  port:1047"  cluster_id:dev.ak-8  controller_id:4  topics.0:'kafka2.MetadataResponseTopic3a  error_code:0  name:ap1  topic_id:00000000-0000-0000-0000-000000000000  is_internal:N  partitions.0:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:2  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.1:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:1  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  partitions.2:"kafka2.MetadataResponsePartition3a  error_code:0  partition_index:0  leader_id:4  leader_epoch:0  replica_nodes.0:4  isr_nodes.0:4"  topic_authorized_operations:OMITTED'  cluster_authorized_operations:OMITTED  error_code:0
